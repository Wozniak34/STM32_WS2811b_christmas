
LL_UART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080043d8  080043d8  000143d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000008  080043e0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000410  20000074  0800444c  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000484  0800444c  00020484  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   000086ae  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000188b  00000000  00000000  00028752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000978  00000000  00000000  00029fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000008a0  00000000  00000000  0002a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001a70d  00000000  00000000  0002b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00007712  00000000  00000000  00045905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00090eac  00000000  00000000  0004d017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000ddec3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f54  00000000  00000000  000ddf14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	080041a8 	.word	0x080041a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	080041a8 	.word	0x080041a8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <__NVIC_GetPriorityGrouping+0x18>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	0a1b      	lsrs	r3, r3, #8
 800022a:	f003 0307 	and.w	r3, r3, #7
}
 800022e:	4618      	mov	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	2b00      	cmp	r3, #0
 800024c:	db0b      	blt.n	8000266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	f003 021f 	and.w	r2, r3, #31
 8000254:	4907      	ldr	r1, [pc, #28]	; (8000274 <__NVIC_EnableIRQ+0x38>)
 8000256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025a:	095b      	lsrs	r3, r3, #5
 800025c:	2001      	movs	r0, #1
 800025e:	fa00 f202 	lsl.w	r2, r0, r2
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	e000e100 	.word	0xe000e100

08000278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	6039      	str	r1, [r7, #0]
 8000282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000288:	2b00      	cmp	r3, #0
 800028a:	db0a      	blt.n	80002a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	b2da      	uxtb	r2, r3
 8000290:	490c      	ldr	r1, [pc, #48]	; (80002c4 <__NVIC_SetPriority+0x4c>)
 8000292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000296:	0112      	lsls	r2, r2, #4
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	440b      	add	r3, r1
 800029c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a0:	e00a      	b.n	80002b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4908      	ldr	r1, [pc, #32]	; (80002c8 <__NVIC_SetPriority+0x50>)
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	f003 030f 	and.w	r3, r3, #15
 80002ae:	3b04      	subs	r3, #4
 80002b0:	0112      	lsls	r2, r2, #4
 80002b2:	b2d2      	uxtb	r2, r2
 80002b4:	440b      	add	r3, r1
 80002b6:	761a      	strb	r2, [r3, #24]
}
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	e000e100 	.word	0xe000e100
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b089      	sub	sp, #36	; 0x24
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f003 0307 	and.w	r3, r3, #7
 80002de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	f1c3 0307 	rsb	r3, r3, #7
 80002e6:	2b04      	cmp	r3, #4
 80002e8:	bf28      	it	cs
 80002ea:	2304      	movcs	r3, #4
 80002ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	3304      	adds	r3, #4
 80002f2:	2b06      	cmp	r3, #6
 80002f4:	d902      	bls.n	80002fc <NVIC_EncodePriority+0x30>
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	3b03      	subs	r3, #3
 80002fa:	e000      	b.n	80002fe <NVIC_EncodePriority+0x32>
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000300:	f04f 32ff 	mov.w	r2, #4294967295
 8000304:	69bb      	ldr	r3, [r7, #24]
 8000306:	fa02 f303 	lsl.w	r3, r2, r3
 800030a:	43da      	mvns	r2, r3
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	401a      	ands	r2, r3
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000314:	f04f 31ff 	mov.w	r1, #4294967295
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	43d9      	mvns	r1, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000324:	4313      	orrs	r3, r2
         );
}
 8000326:	4618      	mov	r0, r3
 8000328:	3724      	adds	r7, #36	; 0x24
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000332:	b480      	push	{r7}
 8000334:	b085      	sub	sp, #20
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800033a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800033e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000340:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4313      	orrs	r3, r2
 8000348:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800034a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800034e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4013      	ands	r3, r2
 8000354:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000356:	68fb      	ldr	r3, [r7, #12]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8000368:	2004      	movs	r0, #4
 800036a:	f7ff ffe2 	bl	8000332 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800036e:	2001      	movs	r0, #1
 8000370:	f7ff ffdf 	bl	8000332 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000374:	f7ff ff54 	bl	8000220 <__NVIC_GetPriorityGrouping>
 8000378:	4603      	mov	r3, r0
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ffa4 	bl	80002cc <NVIC_EncodePriority>
 8000384:	4603      	mov	r3, r0
 8000386:	4619      	mov	r1, r3
 8000388:	200b      	movs	r0, #11
 800038a:	f7ff ff75 	bl	8000278 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800038e:	200b      	movs	r0, #11
 8000390:	f7ff ff54 	bl	800023c <__NVIC_EnableIRQ>

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}

08000398 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4013      	ands	r3, r2
 80003ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003bc:	68fb      	ldr	r3, [r7, #12]
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003ca:	b480      	push	{r7}
 80003cc:	b083      	sub	sp, #12
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
	...

080003e8 <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_DM
     PA12   ------> USB_DP
*/
void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	463b      	mov	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80003fe:	2004      	movs	r0, #4
 8000400:	f7ff ffca 	bl	8000398 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000404:	2001      	movs	r0, #1
 8000406:	f7ff ffc7 	bl	8000398 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800040a:	2002      	movs	r0, #2
 800040c:	f7ff ffc4 	bl	8000398 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000410:	2008      	movs	r0, #8
 8000412:	f7ff ffc1 	bl	8000398 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin);
 8000416:	2123      	movs	r1, #35	; 0x23
 8000418:	481f      	ldr	r0, [pc, #124]	; (8000498 <MX_GPIO_Init+0xb0>)
 800041a:	f7ff ffd6 	bl	80003ca <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = B1_Pin;
 800041e:	2310      	movs	r3, #16
 8000420:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000422:	2300      	movs	r3, #0
 8000424:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800042a:	463b      	mov	r3, r7
 800042c:	4619      	mov	r1, r3
 800042e:	481b      	ldr	r0, [pc, #108]	; (800049c <MX_GPIO_Init+0xb4>)
 8000430:	f002 faae 	bl	8002990 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000434:	2323      	movs	r3, #35	; 0x23
 8000436:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000438:	2301      	movs	r3, #1
 800043a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000448:	463b      	mov	r3, r7
 800044a:	4619      	mov	r1, r3
 800044c:	4812      	ldr	r0, [pc, #72]	; (8000498 <MX_GPIO_Init+0xb0>)
 800044e:	f002 fa9f 	bl	8002990 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8000452:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000456:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000458:	2302      	movs	r3, #2
 800045a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800045c:	2300      	movs	r3, #0
 800045e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000464:	2300      	movs	r3, #0
 8000466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8000468:	230a      	movs	r3, #10
 800046a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	463b      	mov	r3, r7
 800046e:	4619      	mov	r1, r3
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f002 fa8c 	bl	8002990 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000478:	2303      	movs	r3, #3
 800047a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800047c:	2300      	movs	r3, #0
 800047e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000480:	2300      	movs	r3, #0
 8000482:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_GPIO_Init+0xb8>)
 800048a:	f002 fa81 	bl	8002990 <LL_GPIO_Init>

}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	48000400 	.word	0x48000400
 800049c:	48000800 	.word	0x48000800
 80004a0:	48000c00 	.word	0x48000c00

080004a4 <__NVIC_SetPriorityGrouping>:
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f003 0307 	and.w	r3, r3, #7
 80004b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <__NVIC_SetPriorityGrouping+0x44>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004d6:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <__NVIC_SetPriorityGrouping+0x44>)
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	60d3      	str	r3, [r2, #12]
}
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <__NVIC_EnableIRQ>:
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db0b      	blt.n	8000516 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 021f 	and.w	r2, r3, #31
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <__NVIC_EnableIRQ+0x38>)
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	095b      	lsrs	r3, r3, #5
 800050c:	2001      	movs	r0, #1
 800050e:	fa00 f202 	lsl.w	r2, r0, r2
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000e100 	.word	0xe000e100

08000528 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  SET_BIT(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_TCIE);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a19      	ldr	r2, [pc, #100]	; (800059c <LL_DMA_EnableIT_TC+0x74>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d108      	bne.n	800054c <LL_DMA_EnableIT_TC+0x24>
 800053a:	683a      	ldr	r2, [r7, #0]
 800053c:	4613      	mov	r3, r2
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4413      	add	r3, r2
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	461a      	mov	r2, r3
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <LL_DMA_EnableIT_TC+0x78>)
 8000548:	4413      	add	r3, r2
 800054a:	e007      	b.n	800055c <LL_DMA_EnableIT_TC+0x34>
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	461a      	mov	r2, r3
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <LL_DMA_EnableIT_TC+0x7c>)
 800055a:	4413      	add	r3, r2
 800055c:	6819      	ldr	r1, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <LL_DMA_EnableIT_TC+0x74>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d108      	bne.n	8000578 <LL_DMA_EnableIT_TC+0x50>
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	461a      	mov	r2, r3
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <LL_DMA_EnableIT_TC+0x78>)
 8000574:	4413      	add	r3, r2
 8000576:	e007      	b.n	8000588 <LL_DMA_EnableIT_TC+0x60>
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	4613      	mov	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4413      	add	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	461a      	mov	r2, r3
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <LL_DMA_EnableIT_TC+0x7c>)
 8000586:	4413      	add	r3, r2
 8000588:	f041 0202 	orr.w	r2, r1, #2
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40020000 	.word	0x40020000
 80005a0:	4001fff4 	.word	0x4001fff4
 80005a4:	400203f4 	.word	0x400203f4

080005a8 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  SET_BIT(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_HTIE);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a19      	ldr	r2, [pc, #100]	; (800061c <LL_DMA_EnableIT_HT+0x74>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d108      	bne.n	80005cc <LL_DMA_EnableIT_HT+0x24>
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	4613      	mov	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <LL_DMA_EnableIT_HT+0x78>)
 80005c8:	4413      	add	r3, r2
 80005ca:	e007      	b.n	80005dc <LL_DMA_EnableIT_HT+0x34>
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	4613      	mov	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <LL_DMA_EnableIT_HT+0x7c>)
 80005da:	4413      	add	r3, r2
 80005dc:	6819      	ldr	r1, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a0e      	ldr	r2, [pc, #56]	; (800061c <LL_DMA_EnableIT_HT+0x74>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d108      	bne.n	80005f8 <LL_DMA_EnableIT_HT+0x50>
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	4613      	mov	r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <LL_DMA_EnableIT_HT+0x78>)
 80005f4:	4413      	add	r3, r2
 80005f6:	e007      	b.n	8000608 <LL_DMA_EnableIT_HT+0x60>
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	4613      	mov	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	4413      	add	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	461a      	mov	r2, r3
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <LL_DMA_EnableIT_HT+0x7c>)
 8000606:	4413      	add	r3, r2
 8000608:	f041 0204 	orr.w	r2, r1, #4
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40020000 	.word	0x40020000
 8000620:	4001fff4 	.word	0x4001fff4
 8000624:	400203f4 	.word	0x400203f4

08000628 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800062c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000658:	d101      	bne.n	800065e <LL_RCC_HSE_IsReady+0x18>
 800065a:	2301      	movs	r3, #1
 800065c:	e000      	b.n	8000660 <LL_RCC_HSE_IsReady+0x1a>
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800066e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6013      	str	r3, [r2, #0]
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800068c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800069a:	d101      	bne.n	80006a0 <LL_RCC_HSI_IsReady+0x18>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <LL_RCC_HSI_IsReady+0x1a>
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80006b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80006ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 0302 	and.w	r3, r3, #2
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d101      	bne.n	80006e0 <LL_RCC_MSI_IsReady+0x16>
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <LL_RCC_MSI_IsReady+0x18>
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	f023 0203 	bic.w	r2, r3, #3
 80006fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	608b      	str	r3, [r1, #8]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	f003 030c 	and.w	r3, r3, #12
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <LL_RCC_SetRFWKPClockSource>:
  * @note   (*) Value not defined for all devices
  *
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRFWKPClockSource(uint32_t Source)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8000734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800073c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4313      	orrs	r3, r2
 8000748:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800076a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4313      	orrs	r3, r2
 8000772:	608b      	str	r3, [r1, #8]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800078c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000794:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80007b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80007bc:	f023 020f 	bic.w	r2, r3, #15
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	091b      	lsrs	r3, r3, #4
 80007c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c8:	4313      	orrs	r3, r2
 80007ca:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80007ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	608b      	str	r3, [r1, #8]
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800080a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4313      	orrs	r3, r2
 800081c:	608b      	str	r3, [r1, #8]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <LL_RCC_SetSMPSClockSource>:
  *          clock source when a supported SMPS Step Down converter clock
  *          MSIRANGE is set (LL_RCC_MSIRANGE_8 to LL_RCC_MSIRANGE_11)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000838:	f023 0203 	bic.w	r2, r3, #3
 800083c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4313      	orrs	r3, r2
 8000844:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <LL_RCC_SetSMPSPrescaler>:
  *         @arg @ref LL_RCC_SMPS_DIV_2
  *         @arg @ref LL_RCC_SMPS_DIV_3
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSMPSPrescaler(uint32_t Prescaler)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800085a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800085e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000860:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8000864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4313      	orrs	r3, r2
 800086c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800087e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800088c:	6013      	str	r3, [r2, #0]
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800089c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80008aa:	d101      	bne.n	80008b0 <LL_RCC_PLL_IsReady+0x18>
 80008ac:	2301      	movs	r3, #1
 80008ae:	e000      	b.n	80008b2 <LL_RCC_PLL_IsReady+0x1a>
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80008ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ce:	68da      	ldr	r2, [r3, #12]
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80008d2:	4013      	ands	r3, r2
 80008d4:	68f9      	ldr	r1, [r7, #12]
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	4311      	orrs	r1, r2
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	0212      	lsls	r2, r2, #8
 80008de:	4311      	orrs	r1, r2
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	430a      	orrs	r2, r1
 80008e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008e8:	4313      	orrs	r3, r2
 80008ea:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	1fff808c 	.word	0x1fff808c

080008fc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800090a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_2
  *         @arg @ref LL_FLASH_LATENCY_3
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <LL_FLASH_SetLatency+0x24>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f023 0207 	bic.w	r2, r3, #7
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <LL_FLASH_SetLatency+0x24>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	600b      	str	r3, [r1, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	58004000 	.word	0x58004000

08000944 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  *         @arg @ref LL_FLASH_LATENCY_3
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <LL_FLASH_GetLatency+0x18>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0307 	and.w	r3, r3, #7
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	58004000 	.word	0x58004000

08000960 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <LL_SYSTICK_EnableIT+0x1c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <LL_SYSTICK_EnableIT+0x1c>)
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000e010 	.word	0xe000e010

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000986:	2003      	movs	r0, #3
 8000988:	f7ff fd8c 	bl	80004a4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f89e 	bl	8000acc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000990:	f000 f8f2 	bl	8000b78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f7ff fd28 	bl	80003e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000998:	f7ff fce4 	bl	8000364 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800099c:	f000 fd82 	bl	80014a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009a0:	200b      	movs	r0, #11
 80009a2:	f7ff fda3 	bl	80004ec <__NVIC_EnableIRQ>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 80009a6:	2101      	movs	r1, #1
 80009a8:	4844      	ldr	r0, [pc, #272]	; (8000abc <main+0x13c>)
 80009aa:	f7ff fdbd 	bl	8000528 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_1);
 80009ae:	2101      	movs	r1, #1
 80009b0:	4842      	ldr	r0, [pc, #264]	; (8000abc <main+0x13c>)
 80009b2:	f7ff fdf9 	bl	80005a8 <LL_DMA_EnableIT_HT>


  LL_SYSTICK_EnableIT();
 80009b6:	f7ff ffd3 	bl	8000960 <LL_SYSTICK_EnableIT>


  time = 50000;
 80009ba:	4b41      	ldr	r3, [pc, #260]	; (8000ac0 <main+0x140>)
 80009bc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80009c0:	601a      	str	r2, [r3, #0]
  	  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  if((GetTick() - new_msTick) > time)
 80009c2:	f000 f8e7 	bl	8000b94 <GetTick>
 80009c6:	4602      	mov	r2, r0
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <main+0x144>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	1ad2      	subs	r2, r2, r3
 80009ce:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <main+0x140>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d911      	bls.n	80009fa <main+0x7a>
	  	  {
	  		  step++;
 80009d6:	4b3c      	ldr	r3, [pc, #240]	; (8000ac8 <main+0x148>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <main+0x148>)
 80009e0:	801a      	strh	r2, [r3, #0]
	  		  new_msTick = GetTick();
 80009e2:	f000 f8d7 	bl	8000b94 <GetTick>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a36      	ldr	r2, [pc, #216]	; (8000ac4 <main+0x144>)
 80009ea:	6013      	str	r3, [r2, #0]
	  		  if(step > 8) step = 1;
 80009ec:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <main+0x148>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	2b08      	cmp	r3, #8
 80009f2:	d902      	bls.n	80009fa <main+0x7a>
 80009f4:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <main+0x148>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	801a      	strh	r2, [r3, #0]
	  	  }


	  switch (step)
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <main+0x148>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	2b07      	cmp	r3, #7
 8000a02:	d856      	bhi.n	8000ab2 <main+0x132>
 8000a04:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <main+0x8c>)
 8000a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0a:	bf00      	nop
 8000a0c:	08000a2d 	.word	0x08000a2d
 8000a10:	08000a35 	.word	0x08000a35
 8000a14:	08000a43 	.word	0x08000a43
 8000a18:	08000a61 	.word	0x08000a61
 8000a1c:	08000a75 	.word	0x08000a75
 8000a20:	08000a93 	.word	0x08000a93
 8000a24:	08000a99 	.word	0x08000a99
 8000a28:	08000aad 	.word	0x08000aad
	  	  {
			case 1:
				color_change (100);
 8000a2c:	2064      	movs	r0, #100	; 0x64
 8000a2e:	f001 fde7 	bl	8002600 <color_change>
				break;
 8000a32:	e03f      	b.n	8000ab4 <main+0x134>
			case 2:
				WS2811_flash_color(0, 300, 20);
 8000a34:	2214      	movs	r2, #20
 8000a36:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f001 fc70 	bl	8002320 <WS2811_flash_color>
				break;
 8000a40:	e038      	b.n	8000ab4 <main+0x134>
			case 3:
				WS2811_flash(260, 0x4, 0, 150);
 8000a42:	2396      	movs	r3, #150	; 0x96
 8000a44:	2200      	movs	r2, #0
 8000a46:	2104      	movs	r1, #4
 8000a48:	f44f 7082 	mov.w	r0, #260	; 0x104
 8000a4c:	f001 fc35 	bl	80022ba <WS2811_flash>
				WS2811_flash(120, 0x4, 151, 300);
 8000a50:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a54:	2297      	movs	r2, #151	; 0x97
 8000a56:	2104      	movs	r1, #4
 8000a58:	2078      	movs	r0, #120	; 0x78
 8000a5a:	f001 fc2e 	bl	80022ba <WS2811_flash>
				break;
 8000a5e:	e029      	b.n	8000ab4 <main+0x134>
			case 4:
				WS2811_set_color_HSV(120, 0xff, 0xf, 0, 300);
 8000a60:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2300      	movs	r3, #0
 8000a68:	220f      	movs	r2, #15
 8000a6a:	21ff      	movs	r1, #255	; 0xff
 8000a6c:	2078      	movs	r0, #120	; 0x78
 8000a6e:	f001 fbff 	bl	8002270 <WS2811_set_color_HSV>
				break;
 8000a72:	e01f      	b.n	8000ab4 <main+0x134>
			case 5:
				WS2811_flash(345, 0x4, 0, 150);
 8000a74:	2396      	movs	r3, #150	; 0x96
 8000a76:	2200      	movs	r2, #0
 8000a78:	2104      	movs	r1, #4
 8000a7a:	f240 1059 	movw	r0, #345	; 0x159
 8000a7e:	f001 fc1c 	bl	80022ba <WS2811_flash>
				WS2811_flash(60, 0x4, 151, 300);
 8000a82:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a86:	2297      	movs	r2, #151	; 0x97
 8000a88:	2104      	movs	r1, #4
 8000a8a:	203c      	movs	r0, #60	; 0x3c
 8000a8c:	f001 fc15 	bl	80022ba <WS2811_flash>
				break;
 8000a90:	e010      	b.n	8000ab4 <main+0x134>
			case 6:
				WS2811_snake();
 8000a92:	f001 fca1 	bl	80023d8 <WS2811_snake>
				break;
 8000a96:	e00d      	b.n	8000ab4 <main+0x134>
			case 7:
				WS2811_set_color_HSV(240, 0xff, 0xf, 0, 300);
 8000a98:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	21ff      	movs	r1, #255	; 0xff
 8000aa4:	20f0      	movs	r0, #240	; 0xf0
 8000aa6:	f001 fbe3 	bl	8002270 <WS2811_set_color_HSV>
				break;
 8000aaa:	e003      	b.n	8000ab4 <main+0x134>
			case 8:
				WS2811_rainbow_flow();
 8000aac:	f001 fd58 	bl	8002560 <WS2811_rainbow_flow>
				break;
 8000ab0:	e000      	b.n	8000ab4 <main+0x134>

			default:
				break;
 8000ab2:	bf00      	nop
	  	  }

	  Refresch_SysTick(20);
 8000ab4:	2014      	movs	r0, #20
 8000ab6:	f000 f887 	bl	8000bc8 <Refresch_SysTick>
	  	  if((GetTick() - new_msTick) > time)
 8000aba:	e782      	b.n	80009c2 <main+0x42>
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	20000098 	.word	0x20000098
 8000ac4:	20000094 	.word	0x20000094
 8000ac8:	20000008 	.word	0x20000008

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f7ff ff23 	bl	800091c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_3)
 8000ad6:	bf00      	nop
 8000ad8:	f7ff ff34 	bl	8000944 <LL_FLASH_GetLatency>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d1fa      	bne.n	8000ad8 <SystemClock_Config+0xc>
  {
  }

  /* HSE configuration and activation */
  LL_RCC_HSE_Enable();
 8000ae2:	f7ff fda1 	bl	8000628 <LL_RCC_HSE_Enable>
  while(LL_RCC_HSE_IsReady() != 1)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff fdad 	bl	8000646 <LL_RCC_HSE_IsReady>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d1fa      	bne.n	8000ae8 <SystemClock_Config+0x1c>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000af2:	f7ff fdba 	bl	800066a <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000af6:	bf00      	nop
 8000af8:	f7ff fdc6 	bl	8000688 <LL_RCC_HSI_IsReady>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d1fa      	bne.n	8000af8 <SystemClock_Config+0x2c>
  {
  }

  /* MSI configuration and activation */
  LL_RCC_MSI_Enable();
 8000b02:	f7ff fdd3 	bl	80006ac <LL_RCC_MSI_Enable>
  while(LL_RCC_MSI_IsReady() != 1)
 8000b06:	bf00      	nop
 8000b08:	f7ff fddf 	bl	80006ca <LL_RCC_MSI_IsReady>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d1fa      	bne.n	8000b08 <SystemClock_Config+0x3c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 32, LL_RCC_PLLR_DIV_2);
 8000b12:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b16:	2220      	movs	r2, #32
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fece 	bl	80008bc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b20:	f7ff feab 	bl	800087a <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000b24:	f7ff feea 	bl	80008fc <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8000b28:	bf00      	nop
 8000b2a:	f7ff feb5 	bl	8000898 <LL_RCC_PLL_IsReady>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d1fa      	bne.n	8000b2a <SystemClock_Config+0x5e>
  {
  }

  /* Sysclk activation on the main PLL */
  /* Set CPU1 prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe0f 	bl	8000758 <LL_RCC_SetAHBPrescaler>

  /* Set CPU2 prescaler*/
  LL_C2_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000b3a:	2080      	movs	r0, #128	; 0x80
 8000b3c:	f7ff fe20 	bl	8000780 <LL_C2_RCC_SetAHBPrescaler>

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f7ff fdd3 	bl	80006ec <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b46:	bf00      	nop
 8000b48:	f7ff fde4 	bl	8000714 <LL_RCC_GetSysClkSource>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b0c      	cmp	r3, #12
 8000b50:	d1fa      	bne.n	8000b48 <SystemClock_Config+0x7c>
  {
  }

  /* Set AHB SHARED prescaler*/
  LL_RCC_SetAHB4Prescaler(LL_RCC_SYSCLK_DIV_1);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff fe2a 	bl	80007ac <LL_RCC_SetAHB4Prescaler>

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff fe3e 	bl	80007da <LL_RCC_SetAPB1Prescaler>

  /* Set APB2 prescaler*/
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fe4f 	bl	8000802 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <SystemClock_Config+0xa8>)
 8000b66:	f002 fa6f 	bl	8003048 <LL_Init1msTick>

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8000b6a:	4802      	ldr	r0, [pc, #8]	; (8000b74 <SystemClock_Config+0xa8>)
 8000b6c:	f002 faa2 	bl	80030b4 <LL_SetSystemCoreClock>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	03d09000 	.word	0x03d09000

08000b78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff fe54 	bl	800082a <LL_RCC_SetSMPSClockSource>
  LL_RCC_SetSMPSPrescaler(LL_RCC_SMPS_DIV_0);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff fe65 	bl	8000852 <LL_RCC_SetSMPSPrescaler>
  LL_RCC_SetRFWKPClockSource(LL_RCC_RFWKP_CLKSOURCE_NONE);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff fdcf 	bl	800072c <LL_RCC_SetRFWKPClockSource>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <GetTick>:

/* USER CODE BEGIN 4 */


uint32_t GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
	return ms_Ticks;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000090 	.word	0x20000090

08000bac <Tick_add>:


void Tick_add(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	ms_Ticks++;
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <Tick_add+0x18>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a03      	ldr	r2, [pc, #12]	; (8000bc4 <Tick_add+0x18>)
 8000bb8:	6013      	str	r3, [r2, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	20000090 	.word	0x20000090

08000bc8 <Refresch_SysTick>:


void Refresch_SysTick(uint16_t time)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
	static uint32_t new_tick;

	if((GetTick() - new_tick) >= time)
 8000bd2:	f7ff ffdf 	bl	8000b94 <GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <Refresch_SysTick+0x34>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1ad2      	subs	r2, r2, r3
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d306      	bcc.n	8000bf2 <Refresch_SysTick+0x2a>
	{
		ws2811_refresh();
 8000be4:	f000 ff8e 	bl	8001b04 <ws2811_refresh>
		new_tick = GetTick();
 8000be8:	f7ff ffd4 	bl	8000b94 <GetTick>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <Refresch_SysTick+0x34>)
 8000bf0:	6013      	str	r3, [r2, #0]
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000009c 	.word	0x2000009c

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Tick_add();
 8000c4c:	f7ff ffae 	bl	8000bac <Tick_add>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	ws2811_refresh_IRQ();
 8000c58:	f001 f81a 	bl	8001c90 <ws2811_refresh_IRQ>

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */


  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return 1;
 8000c64:	2301      	movs	r3, #1
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_kill>:

int _kill(int pid, int sig)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c7a:	f002 fa2b 	bl	80030d4 <__errno>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2216      	movs	r2, #22
 8000c82:	601a      	str	r2, [r3, #0]
  return -1;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_exit>:

void _exit (int status)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ffe7 	bl	8000c70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ca2:	e7fe      	b.n	8000ca2 <_exit+0x12>

08000ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00a      	b.n	8000ccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb6:	f3af 8000 	nop.w
 8000cba:	4601      	mov	r1, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf0      	blt.n	8000cb6 <_read+0x12>
  }

  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e009      	b.n	8000d04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf1      	blt.n	8000cf0 <_write+0x12>
  }
  return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_close>:

int _close(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f002 f990 	bl	80030d4 <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20030000 	.word	0x20030000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	200000a0 	.word	0x200000a0
 8000de8:	20000488 	.word	0x20000488

08000dec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <SystemInit+0x98>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <SystemInit+0x98>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e18:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <SystemInit+0x9c>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e36:	f023 0305 	bic.w	r3, r3, #5
 8000e3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e4a:	f023 0301 	bic.w	r3, r3, #1
 8000e4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <SystemInit+0xa0>)
 8000e58:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <SystemInit+0xa0>)
 8000e60:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	faf6fefb 	.word	0xfaf6fefb
 8000e8c:	22041000 	.word	0x22041000

08000e90 <LL_DMA_SetDataTransferDirection>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR,
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <LL_DMA_SetDataTransferDirection+0x7c>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d108      	bne.n	8000eb6 <LL_DMA_SetDataTransferDirection+0x26>
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <LL_DMA_SetDataTransferDirection+0x80>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	e007      	b.n	8000ec6 <LL_DMA_SetDataTransferDirection+0x36>
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <LL_DMA_SetDataTransferDirection+0x84>)
 8000ec4:	4413      	add	r3, r2
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000ecc:	f022 0210 	bic.w	r2, r2, #16
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	490e      	ldr	r1, [pc, #56]	; (8000f0c <LL_DMA_SetDataTransferDirection+0x7c>)
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d108      	bne.n	8000eea <LL_DMA_SetDataTransferDirection+0x5a>
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	460b      	mov	r3, r1
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <LL_DMA_SetDataTransferDirection+0x80>)
 8000ee6:	440b      	add	r3, r1
 8000ee8:	e007      	b.n	8000efa <LL_DMA_SetDataTransferDirection+0x6a>
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	460b      	mov	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <LL_DMA_SetDataTransferDirection+0x84>)
 8000ef8:	440b      	add	r3, r1
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	4001fff4 	.word	0x4001fff4
 8000f14:	400203f4 	.word	0x400203f4

08000f18 <LL_DMA_SetMode>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_CIRC,
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <LL_DMA_SetMode+0x78>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d108      	bne.n	8000f3e <LL_DMA_SetMode+0x26>
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <LL_DMA_SetMode+0x7c>)
 8000f3a:	4413      	add	r3, r2
 8000f3c:	e007      	b.n	8000f4e <LL_DMA_SetMode+0x36>
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <LL_DMA_SetMode+0x80>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 0120 	bic.w	r1, r3, #32
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LL_DMA_SetMode+0x78>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d108      	bne.n	8000f6e <LL_DMA_SetMode+0x56>
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <LL_DMA_SetMode+0x7c>)
 8000f6a:	4413      	add	r3, r2
 8000f6c:	e007      	b.n	8000f7e <LL_DMA_SetMode+0x66>
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <LL_DMA_SetMode+0x80>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40020000 	.word	0x40020000
 8000f94:	4001fff4 	.word	0x4001fff4
 8000f98:	400203f4 	.word	0x400203f4

08000f9c <LL_DMA_SetPeriphIncMode>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_PINC,
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4a1a      	ldr	r2, [pc, #104]	; (8001014 <LL_DMA_SetPeriphIncMode+0x78>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d108      	bne.n	8000fc2 <LL_DMA_SetPeriphIncMode+0x26>
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <LL_DMA_SetPeriphIncMode+0x7c>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	e007      	b.n	8000fd2 <LL_DMA_SetPeriphIncMode+0x36>
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <LL_DMA_SetPeriphIncMode+0x80>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <LL_DMA_SetPeriphIncMode+0x78>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d108      	bne.n	8000ff2 <LL_DMA_SetPeriphIncMode+0x56>
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <LL_DMA_SetPeriphIncMode+0x7c>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	e007      	b.n	8001002 <LL_DMA_SetPeriphIncMode+0x66>
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <LL_DMA_SetPeriphIncMode+0x80>)
 8001000:	4413      	add	r3, r2
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40020000 	.word	0x40020000
 8001018:	4001fff4 	.word	0x4001fff4
 800101c:	400203f4 	.word	0x400203f4

08001020 <LL_DMA_SetMemoryIncMode>:
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_MINC,
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <LL_DMA_SetMemoryIncMode+0x78>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d108      	bne.n	8001046 <LL_DMA_SetMemoryIncMode+0x26>
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	461a      	mov	r2, r3
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <LL_DMA_SetMemoryIncMode+0x7c>)
 8001042:	4413      	add	r3, r2
 8001044:	e007      	b.n	8001056 <LL_DMA_SetMemoryIncMode+0x36>
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	461a      	mov	r2, r3
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <LL_DMA_SetMemoryIncMode+0x80>)
 8001054:	4413      	add	r3, r2
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <LL_DMA_SetMemoryIncMode+0x78>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d108      	bne.n	8001076 <LL_DMA_SetMemoryIncMode+0x56>
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	461a      	mov	r2, r3
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <LL_DMA_SetMemoryIncMode+0x7c>)
 8001072:	4413      	add	r3, r2
 8001074:	e007      	b.n	8001086 <LL_DMA_SetMemoryIncMode+0x66>
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	461a      	mov	r2, r3
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <LL_DMA_SetMemoryIncMode+0x80>)
 8001084:	4413      	add	r3, r2
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40020000 	.word	0x40020000
 800109c:	4001fff4 	.word	0x4001fff4
 80010a0:	400203f4 	.word	0x400203f4

080010a4 <LL_DMA_SetPeriphSize>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_PSIZE,
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4a1a      	ldr	r2, [pc, #104]	; (800111c <LL_DMA_SetPeriphSize+0x78>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d108      	bne.n	80010ca <LL_DMA_SetPeriphSize+0x26>
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <LL_DMA_SetPeriphSize+0x7c>)
 80010c6:	4413      	add	r3, r2
 80010c8:	e007      	b.n	80010da <LL_DMA_SetPeriphSize+0x36>
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <LL_DMA_SetPeriphSize+0x80>)
 80010d8:	4413      	add	r3, r2
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <LL_DMA_SetPeriphSize+0x78>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d108      	bne.n	80010fa <LL_DMA_SetPeriphSize+0x56>
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <LL_DMA_SetPeriphSize+0x7c>)
 80010f6:	4413      	add	r3, r2
 80010f8:	e007      	b.n	800110a <LL_DMA_SetPeriphSize+0x66>
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	461a      	mov	r2, r3
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <LL_DMA_SetPeriphSize+0x80>)
 8001108:	4413      	add	r3, r2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	430a      	orrs	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	40020000 	.word	0x40020000
 8001120:	4001fff4 	.word	0x4001fff4
 8001124:	400203f4 	.word	0x400203f4

08001128 <LL_DMA_SetMemorySize>:
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_MSIZE,
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <LL_DMA_SetMemorySize+0x78>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d108      	bne.n	800114e <LL_DMA_SetMemorySize+0x26>
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	461a      	mov	r2, r3
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <LL_DMA_SetMemorySize+0x7c>)
 800114a:	4413      	add	r3, r2
 800114c:	e007      	b.n	800115e <LL_DMA_SetMemorySize+0x36>
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	461a      	mov	r2, r3
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <LL_DMA_SetMemorySize+0x80>)
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LL_DMA_SetMemorySize+0x78>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d108      	bne.n	800117e <LL_DMA_SetMemorySize+0x56>
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	461a      	mov	r2, r3
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <LL_DMA_SetMemorySize+0x7c>)
 800117a:	4413      	add	r3, r2
 800117c:	e007      	b.n	800118e <LL_DMA_SetMemorySize+0x66>
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	461a      	mov	r2, r3
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <LL_DMA_SetMemorySize+0x80>)
 800118c:	4413      	add	r3, r2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	430a      	orrs	r2, r1
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40020000 	.word	0x40020000
 80011a4:	4001fff4 	.word	0x4001fff4
 80011a8:	400203f4 	.word	0x400203f4

080011ac <LL_DMA_SetChannelPriorityLevel>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_PL,
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a1a      	ldr	r2, [pc, #104]	; (8001224 <LL_DMA_SetChannelPriorityLevel+0x78>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d108      	bne.n	80011d2 <LL_DMA_SetChannelPriorityLevel+0x26>
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <LL_DMA_SetChannelPriorityLevel+0x7c>)
 80011ce:	4413      	add	r3, r2
 80011d0:	e007      	b.n	80011e2 <LL_DMA_SetChannelPriorityLevel+0x36>
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	461a      	mov	r2, r3
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <LL_DMA_SetChannelPriorityLevel+0x80>)
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <LL_DMA_SetChannelPriorityLevel+0x78>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d108      	bne.n	8001202 <LL_DMA_SetChannelPriorityLevel+0x56>
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <LL_DMA_SetChannelPriorityLevel+0x7c>)
 80011fe:	4413      	add	r3, r2
 8001200:	e007      	b.n	8001212 <LL_DMA_SetChannelPriorityLevel+0x66>
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	461a      	mov	r2, r3
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <LL_DMA_SetChannelPriorityLevel+0x80>)
 8001210:	4413      	add	r3, r2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40020000 	.word	0x40020000
 8001228:	4001fff4 	.word	0x4001fff4
 800122c:	400203f4 	.word	0x400203f4

08001230 <LL_DMA_SetPeriphRequest>:
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(__LL_DMA_INSTANCE_TO_DMAMUX_CCR(DMAx, Channel - 1U)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <LL_DMA_SetPeriphRequest+0x58>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d104      	bne.n	800124e <LL_DMA_SetPeriphRequest+0x1e>
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	009a      	lsls	r2, r3, #2
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <LL_DMA_SetPeriphRequest+0x5c>)
 800124a:	4413      	add	r3, r2
 800124c:	e003      	b.n	8001256 <LL_DMA_SetPeriphRequest+0x26>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	009a      	lsls	r2, r3, #2
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <LL_DMA_SetPeriphRequest+0x60>)
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <LL_DMA_SetPeriphRequest+0x58>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d104      	bne.n	800126e <LL_DMA_SetPeriphRequest+0x3e>
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	009a      	lsls	r2, r3, #2
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <LL_DMA_SetPeriphRequest+0x5c>)
 800126a:	4413      	add	r3, r2
 800126c:	e003      	b.n	8001276 <LL_DMA_SetPeriphRequest+0x46>
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	009a      	lsls	r2, r3, #2
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <LL_DMA_SetPeriphRequest+0x60>)
 8001274:	4413      	add	r3, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	40020000 	.word	0x40020000
 800128c:	400207fc 	.word	0x400207fc
 8001290:	40020818 	.word	0x40020818

08001294 <LL_RCC_SetUSARTClockSource>:
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a4:	f023 0203 	bic.w	r2, r3, #3
 80012a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_AHB2_GRP1_EnableClock>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e4:	68fb      	ldr	r3, [r7, #12]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4313      	orrs	r3, r2
 8001308:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4013      	ands	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f043 0201 	orr.w	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_USART_EnableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_EnableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableFIFO(USART_TypeDef *USARTx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	601a      	str	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3308      	adds	r3, #8
 8001372:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	e853 3f00 	ldrex	r3, [r3]
 800137a:	60bb      	str	r3, [r7, #8]
   return(result);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	075b      	lsls	r3, r3, #29
 8001386:	4313      	orrs	r3, r2
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3308      	adds	r3, #8
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	61ba      	str	r2, [r7, #24]
 8001392:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001394:	6979      	ldr	r1, [r7, #20]
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	e841 2300 	strex	r3, r2, [r1]
 800139c:	613b      	str	r3, [r7, #16]
   return(result);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e4      	bne.n	800136e <LL_USART_SetTXFIFOThreshold+0xa>
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b089      	sub	sp, #36	; 0x24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3308      	adds	r3, #8
 80013c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	e853 3f00 	ldrex	r3, [r3]
 80013c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	065b      	lsls	r3, r3, #25
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3308      	adds	r3, #8
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	61ba      	str	r2, [r7, #24]
 80013e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013e2:	6979      	ldr	r1, [r7, #20]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	e841 2300 	strex	r3, r2, [r1]
 80013ea:	613b      	str	r3, [r7, #16]
   return(result);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1e4      	bne.n	80013bc <LL_USART_SetRXFIFOThreshold+0xa>
}
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	3724      	adds	r7, #36	; 0x24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_USART_SetTXPinLevel>:
  *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
  *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	605a      	str	r2, [r3, #4]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	609a      	str	r2, [r3, #8]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001466:	d101      	bne.n	800146c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <LL_USART_IsActiveFlag_TEACK+0x1c>
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800148e:	d101      	bne.n	8001494 <LL_USART_IsActiveFlag_REACK+0x1a>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <LL_USART_IsActiveFlag_REACK+0x1c>
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	; 0x38
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80014aa:	f107 0318 	add.w	r3, r7, #24
 80014ae:	2220      	movs	r2, #32
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 fe38 	bl	8003128 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff fee3 	bl	8001294 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80014ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014d2:	f7ff ff0e 	bl	80012f2 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f7ff fef2 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014dc:	2002      	movs	r0, #2
 80014de:	f7ff feef 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = STLINK_RX_Pin;
 80014e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014e8:	2302      	movs	r3, #2
 80014ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80014ec:	2302      	movs	r3, #2
 80014ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80014f8:	2307      	movs	r3, #7
 80014fa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001504:	f001 fa44 	bl	8002990 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = STLINK_TX_Pin;
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800150c:	2302      	movs	r3, #2
 800150e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001518:	2301      	movs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800151c:	2307      	movs	r3, #7
 800151e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(STLINK_TX_GPIO_Port, &GPIO_InitStruct);
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4835      	ldr	r0, [pc, #212]	; (80015fc <MX_USART1_UART_Init+0x158>)
 8001526:	f001 fa33 	bl	8002990 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_USART1_TX);
 800152a:	220f      	movs	r2, #15
 800152c:	2101      	movs	r1, #1
 800152e:	4834      	ldr	r0, [pc, #208]	; (8001600 <MX_USART1_UART_Init+0x15c>)
 8001530:	f7ff fe7e 	bl	8001230 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001534:	2210      	movs	r2, #16
 8001536:	2101      	movs	r1, #1
 8001538:	4831      	ldr	r0, [pc, #196]	; (8001600 <MX_USART1_UART_Init+0x15c>)
 800153a:	f7ff fca9 	bl	8000e90 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	2101      	movs	r1, #1
 8001544:	482e      	ldr	r0, [pc, #184]	; (8001600 <MX_USART1_UART_Init+0x15c>)
 8001546:	f7ff fe31 	bl	80011ac <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 800154a:	2200      	movs	r2, #0
 800154c:	2101      	movs	r1, #1
 800154e:	482c      	ldr	r0, [pc, #176]	; (8001600 <MX_USART1_UART_Init+0x15c>)
 8001550:	f7ff fce2 	bl	8000f18 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001554:	2200      	movs	r2, #0
 8001556:	2101      	movs	r1, #1
 8001558:	4829      	ldr	r0, [pc, #164]	; (8001600 <MX_USART1_UART_Init+0x15c>)
 800155a:	f7ff fd1f 	bl	8000f9c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	2101      	movs	r1, #1
 8001562:	4827      	ldr	r0, [pc, #156]	; (8001600 <MX_USART1_UART_Init+0x15c>)
 8001564:	f7ff fd5c 	bl	8001020 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8001568:	2200      	movs	r2, #0
 800156a:	2101      	movs	r1, #1
 800156c:	4824      	ldr	r0, [pc, #144]	; (8001600 <MX_USART1_UART_Init+0x15c>)
 800156e:	f7ff fd99 	bl	80010a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8001572:	2200      	movs	r2, #0
 8001574:	2101      	movs	r1, #1
 8001576:	4822      	ldr	r0, [pc, #136]	; (8001600 <MX_USART1_UART_Init+0x15c>)
 8001578:	f7ff fdd6 	bl	8001128 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 3600000;
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <MX_USART1_UART_Init+0x160>)
 8001582:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_7B;
 8001584:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001588:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001592:	230c      	movs	r3, #12
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001596:	2300      	movs	r3, #0
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800159a:	2300      	movs	r3, #0
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	4619      	mov	r1, r3
 80015a4:	4818      	ldr	r0, [pc, #96]	; (8001608 <MX_USART1_UART_Init+0x164>)
 80015a6:	f001 fcdb 	bl	8002f60 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80015aa:	2100      	movs	r1, #0
 80015ac:	4816      	ldr	r0, [pc, #88]	; (8001608 <MX_USART1_UART_Init+0x164>)
 80015ae:	f7ff fed9 	bl	8001364 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80015b2:	2100      	movs	r1, #0
 80015b4:	4814      	ldr	r0, [pc, #80]	; (8001608 <MX_USART1_UART_Init+0x164>)
 80015b6:	f7ff fefc 	bl	80013b2 <LL_USART_SetRXFIFOThreshold>
  LL_USART_EnableFIFO(USART1);
 80015ba:	4813      	ldr	r0, [pc, #76]	; (8001608 <MX_USART1_UART_Init+0x164>)
 80015bc:	f7ff fec2 	bl	8001344 <LL_USART_EnableFIFO>
  LL_USART_SetTXPinLevel(USART1, LL_USART_TXPIN_LEVEL_INVERTED);
 80015c0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80015c4:	4810      	ldr	r0, [pc, #64]	; (8001608 <MX_USART1_UART_Init+0x164>)
 80015c6:	f7ff ff1b 	bl	8001400 <LL_USART_SetTXPinLevel>
  LL_USART_ConfigAsyncMode(USART1);
 80015ca:	480f      	ldr	r0, [pc, #60]	; (8001608 <MX_USART1_UART_Init+0x164>)
 80015cc:	f7ff ff2b 	bl	8001426 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_USART1_UART_Init+0x164>)
 80015d2:	f7ff fea7 	bl	8001324 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 80015d6:	bf00      	nop
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <MX_USART1_UART_Init+0x164>)
 80015da:	f7ff ff3a 	bl	8001452 <LL_USART_IsActiveFlag_TEACK>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f9      	beq.n	80015d8 <MX_USART1_UART_Init+0x134>
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <MX_USART1_UART_Init+0x164>)
 80015e6:	f7ff ff48 	bl	800147a <LL_USART_IsActiveFlag_REACK>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f3      	beq.n	80015d8 <MX_USART1_UART_Init+0x134>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3738      	adds	r7, #56	; 0x38
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	48000400 	.word	0x48000400
 8001600:	40020000 	.word	0x40020000
 8001604:	0036ee80 	.word	0x0036ee80
 8001608:	40013800 	.word	0x40013800

0800160c <__NVIC_EnableIRQ>:
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <__NVIC_EnableIRQ+0x38>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100

08001648 <LL_DMA_EnableChannel>:
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  SET_BIT(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_EN);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <LL_DMA_EnableChannel+0x74>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d108      	bne.n	800166c <LL_DMA_EnableChannel+0x24>
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	461a      	mov	r2, r3
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <LL_DMA_EnableChannel+0x78>)
 8001668:	4413      	add	r3, r2
 800166a:	e007      	b.n	800167c <LL_DMA_EnableChannel+0x34>
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	461a      	mov	r2, r3
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <LL_DMA_EnableChannel+0x7c>)
 800167a:	4413      	add	r3, r2
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <LL_DMA_EnableChannel+0x74>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d108      	bne.n	8001698 <LL_DMA_EnableChannel+0x50>
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	461a      	mov	r2, r3
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <LL_DMA_EnableChannel+0x78>)
 8001694:	4413      	add	r3, r2
 8001696:	e007      	b.n	80016a8 <LL_DMA_EnableChannel+0x60>
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <LL_DMA_EnableChannel+0x7c>)
 80016a6:	4413      	add	r3, r2
 80016a8:	f041 0201 	orr.w	r2, r1, #1
 80016ac:	601a      	str	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40020000 	.word	0x40020000
 80016c0:	4001fff4 	.word	0x4001fff4
 80016c4:	400203f4 	.word	0x400203f4

080016c8 <LL_DMA_DisableChannel>:
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_EN);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a19      	ldr	r2, [pc, #100]	; (800173c <LL_DMA_DisableChannel+0x74>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d108      	bne.n	80016ec <LL_DMA_DisableChannel+0x24>
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <LL_DMA_DisableChannel+0x78>)
 80016e8:	4413      	add	r3, r2
 80016ea:	e007      	b.n	80016fc <LL_DMA_DisableChannel+0x34>
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <LL_DMA_DisableChannel+0x7c>)
 80016fa:	4413      	add	r3, r2
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <LL_DMA_DisableChannel+0x74>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d108      	bne.n	8001718 <LL_DMA_DisableChannel+0x50>
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	461a      	mov	r2, r3
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <LL_DMA_DisableChannel+0x78>)
 8001714:	4413      	add	r3, r2
 8001716:	e007      	b.n	8001728 <LL_DMA_DisableChannel+0x60>
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	461a      	mov	r2, r3
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <LL_DMA_DisableChannel+0x7c>)
 8001726:	4413      	add	r3, r2
 8001728:	f021 0201 	bic.w	r2, r1, #1
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40020000 	.word	0x40020000
 8001740:	4001fff4 	.word	0x4001fff4
 8001744:	400203f4 	.word	0x400203f4

08001748 <LL_DMA_IsEnabledChannel>:
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a10      	ldr	r2, [pc, #64]	; (8001798 <LL_DMA_IsEnabledChannel+0x50>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d108      	bne.n	800176c <LL_DMA_IsEnabledChannel+0x24>
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	461a      	mov	r2, r3
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <LL_DMA_IsEnabledChannel+0x54>)
 8001768:	4413      	add	r3, r2
 800176a:	e007      	b.n	800177c <LL_DMA_IsEnabledChannel+0x34>
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	461a      	mov	r2, r3
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <LL_DMA_IsEnabledChannel+0x58>)
 800177a:	4413      	add	r3, r2
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <LL_DMA_IsEnabledChannel+0x42>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <LL_DMA_IsEnabledChannel+0x44>
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40020000 	.word	0x40020000
 800179c:	4001fff4 	.word	0x4001fff4
 80017a0:	400203f4 	.word	0x400203f4

080017a4 <LL_DMA_SetDataLength>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CNDTR,
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4a1a      	ldr	r2, [pc, #104]	; (800181c <LL_DMA_SetDataLength+0x78>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d108      	bne.n	80017ca <LL_DMA_SetDataLength+0x26>
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <LL_DMA_SetDataLength+0x7c>)
 80017c6:	4413      	add	r3, r2
 80017c8:	e007      	b.n	80017da <LL_DMA_SetDataLength+0x36>
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <LL_DMA_SetDataLength+0x80>)
 80017d8:	4413      	add	r3, r2
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	0c1a      	lsrs	r2, r3, #16
 80017de:	0412      	lsls	r2, r2, #16
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	490e      	ldr	r1, [pc, #56]	; (800181c <LL_DMA_SetDataLength+0x78>)
 80017e4:	428b      	cmp	r3, r1
 80017e6:	d108      	bne.n	80017fa <LL_DMA_SetDataLength+0x56>
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	460b      	mov	r3, r1
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4619      	mov	r1, r3
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <LL_DMA_SetDataLength+0x7c>)
 80017f6:	440b      	add	r3, r1
 80017f8:	e007      	b.n	800180a <LL_DMA_SetDataLength+0x66>
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4619      	mov	r1, r3
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <LL_DMA_SetDataLength+0x80>)
 8001808:	440b      	add	r3, r1
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	430a      	orrs	r2, r1
 800180e:	605a      	str	r2, [r3, #4]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40020000 	.word	0x40020000
 8001820:	4001fff4 	.word	0x4001fff4
 8001824:	400203f4 	.word	0x400203f4

08001828 <LL_DMA_ConfigAddresses>:
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b10      	cmp	r3, #16
 800183a:	d12e      	bne.n	800189a <LL_DMA_ConfigAddresses+0x72>
    WRITE_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CMAR, SrcAddress);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <LL_DMA_ConfigAddresses+0xdc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d108      	bne.n	8001856 <LL_DMA_ConfigAddresses+0x2e>
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	461a      	mov	r2, r3
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <LL_DMA_ConfigAddresses+0xe0>)
 8001852:	4413      	add	r3, r2
 8001854:	e007      	b.n	8001866 <LL_DMA_ConfigAddresses+0x3e>
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	461a      	mov	r2, r3
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <LL_DMA_ConfigAddresses+0xe4>)
 8001864:	4413      	add	r3, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	60da      	str	r2, [r3, #12]
    WRITE_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CPAR, DstAddress);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4a25      	ldr	r2, [pc, #148]	; (8001904 <LL_DMA_ConfigAddresses+0xdc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d108      	bne.n	8001884 <LL_DMA_ConfigAddresses+0x5c>
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	461a      	mov	r2, r3
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <LL_DMA_ConfigAddresses+0xe0>)
 8001880:	4413      	add	r3, r2
 8001882:	e007      	b.n	8001894 <LL_DMA_ConfigAddresses+0x6c>
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	461a      	mov	r2, r3
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <LL_DMA_ConfigAddresses+0xe4>)
 8001892:	4413      	add	r3, r2
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	609a      	str	r2, [r3, #8]
}
 8001898:	e02d      	b.n	80018f6 <LL_DMA_ConfigAddresses+0xce>
    WRITE_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CPAR, SrcAddress);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <LL_DMA_ConfigAddresses+0xdc>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d108      	bne.n	80018b4 <LL_DMA_ConfigAddresses+0x8c>
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <LL_DMA_ConfigAddresses+0xe0>)
 80018b0:	4413      	add	r3, r2
 80018b2:	e007      	b.n	80018c4 <LL_DMA_ConfigAddresses+0x9c>
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	461a      	mov	r2, r3
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <LL_DMA_ConfigAddresses+0xe4>)
 80018c2:	4413      	add	r3, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CMAR, DstAddress);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <LL_DMA_ConfigAddresses+0xdc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d108      	bne.n	80018e2 <LL_DMA_ConfigAddresses+0xba>
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	461a      	mov	r2, r3
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <LL_DMA_ConfigAddresses+0xe0>)
 80018de:	4413      	add	r3, r2
 80018e0:	e007      	b.n	80018f2 <LL_DMA_ConfigAddresses+0xca>
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <LL_DMA_ConfigAddresses+0xe4>)
 80018f0:	4413      	add	r3, r2
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	60da      	str	r2, [r3, #12]
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40020000 	.word	0x40020000
 8001908:	4001fff4 	.word	0x4001fff4
 800190c:	400203f4 	.word	0x400203f4

08001910 <LL_DMA_IsActiveFlag_TC1>:
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b02      	cmp	r3, #2
 8001922:	d101      	bne.n	8001928 <LL_DMA_IsActiveFlag_TC1+0x18>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_DMA_IsActiveFlag_TC1+0x1a>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_DMA_IsActiveFlag_HT1>:
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b04      	cmp	r3, #4
 8001948:	d101      	bne.n	800194e <LL_DMA_IsActiveFlag_HT1+0x18>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <LL_DMA_IsActiveFlag_HT1+0x1a>
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_DMA_ClearFlag_TC1>:
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	605a      	str	r2, [r3, #4]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_DMA_ClearFlag_HT1>:
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2204      	movs	r2, #4
 8001982:	605a      	str	r2, [r3, #4]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_DMA_EnableIT_TC>:
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  SET_BIT(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_TCIE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <LL_DMA_EnableIT_TC+0x74>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d108      	bne.n	80019b4 <LL_DMA_EnableIT_TC+0x24>
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <LL_DMA_EnableIT_TC+0x78>)
 80019b0:	4413      	add	r3, r2
 80019b2:	e007      	b.n	80019c4 <LL_DMA_EnableIT_TC+0x34>
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	461a      	mov	r2, r3
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <LL_DMA_EnableIT_TC+0x7c>)
 80019c2:	4413      	add	r3, r2
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <LL_DMA_EnableIT_TC+0x74>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d108      	bne.n	80019e0 <LL_DMA_EnableIT_TC+0x50>
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	461a      	mov	r2, r3
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <LL_DMA_EnableIT_TC+0x78>)
 80019dc:	4413      	add	r3, r2
 80019de:	e007      	b.n	80019f0 <LL_DMA_EnableIT_TC+0x60>
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <LL_DMA_EnableIT_TC+0x7c>)
 80019ee:	4413      	add	r3, r2
 80019f0:	f041 0202 	orr.w	r2, r1, #2
 80019f4:	601a      	str	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40020000 	.word	0x40020000
 8001a08:	4001fff4 	.word	0x4001fff4
 8001a0c:	400203f4 	.word	0x400203f4

08001a10 <LL_DMA_EnableIT_HT>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  SET_BIT(__LL_DMA_INSTANCE_TO_CHANNEL(DMAx, Channel - 1U)->CCR, DMA_CCR_HTIE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <LL_DMA_EnableIT_HT+0x74>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d108      	bne.n	8001a34 <LL_DMA_EnableIT_HT+0x24>
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <LL_DMA_EnableIT_HT+0x78>)
 8001a30:	4413      	add	r3, r2
 8001a32:	e007      	b.n	8001a44 <LL_DMA_EnableIT_HT+0x34>
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <LL_DMA_EnableIT_HT+0x7c>)
 8001a42:	4413      	add	r3, r2
 8001a44:	6819      	ldr	r1, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <LL_DMA_EnableIT_HT+0x74>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d108      	bne.n	8001a60 <LL_DMA_EnableIT_HT+0x50>
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <LL_DMA_EnableIT_HT+0x78>)
 8001a5c:	4413      	add	r3, r2
 8001a5e:	e007      	b.n	8001a70 <LL_DMA_EnableIT_HT+0x60>
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <LL_DMA_EnableIT_HT+0x7c>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	f041 0204 	orr.w	r2, r1, #4
 8001a74:	601a      	str	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40020000 	.word	0x40020000
 8001a88:	4001fff4 	.word	0x4001fff4
 8001a8c:	400203f4 	.word	0x400203f4

08001a90 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	e853 3f00 	ldrex	r3, [r3]
 8001aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3308      	adds	r3, #8
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	61ba      	str	r2, [r7, #24]
 8001ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ab8:	6979      	ldr	r1, [r7, #20]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	e841 2300 	strex	r3, r2, [r1]
 8001ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e7      	bne.n	8001a98 <LL_USART_EnableDMAReq_TX+0x8>
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b085      	sub	sp, #20
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d103      	bne.n	8001aee <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3328      	adds	r3, #40	; 0x28
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e002      	b.n	8001af4 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3324      	adds	r3, #36	; 0x24
 8001af2:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8001af4:	68fb      	ldr	r3, [r7, #12]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <ws2811_refresh>:


uint8_t k;

void ws2811_refresh(void)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af02      	add	r7, sp, #8

	uint16_t j = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	80fb      	strh	r3, [r7, #6]

	for(current_led=0; current_led<2; current_led++)
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <ws2811_refresh+0x178>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	801a      	strh	r2, [r3, #0]
 8001b14:	e088      	b.n	8001c28 <ws2811_refresh+0x124>
	{

		//GREEN
		for(int8_t k=7; k>=0; k--)
 8001b16:	2307      	movs	r3, #7
 8001b18:	717b      	strb	r3, [r7, #5]
 8001b1a:	e023      	b.n	8001b64 <ws2811_refresh+0x60>
		{
			if((ws2811_array[current_led].red & (1<<k)) == 0)
 8001b1c:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <ws2811_refresh+0x178>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	4a57      	ldr	r2, [pc, #348]	; (8001c80 <ws2811_refresh+0x17c>)
 8001b24:	460b      	mov	r3, r1
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	440b      	add	r3, r1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b34:	fa42 f303 	asr.w	r3, r2, r3
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <ws2811_refresh+0x46>
				buffer[j] = zero;
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	4a50      	ldr	r2, [pc, #320]	; (8001c84 <ws2811_refresh+0x180>)
 8001b44:	21ff      	movs	r1, #255	; 0xff
 8001b46:	54d1      	strb	r1, [r2, r3]
 8001b48:	e003      	b.n	8001b52 <ws2811_refresh+0x4e>
		  	else
		  	  	buffer[j] = one;
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4a4d      	ldr	r2, [pc, #308]	; (8001c84 <ws2811_refresh+0x180>)
 8001b4e:	21f0      	movs	r1, #240	; 0xf0
 8001b50:	54d1      	strb	r1, [r2, r3]
		  	j++;
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	3301      	adds	r3, #1
 8001b56:	80fb      	strh	r3, [r7, #6]
		for(int8_t k=7; k>=0; k--)
 8001b58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	717b      	strb	r3, [r7, #5]
 8001b64:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	dad7      	bge.n	8001b1c <ws2811_refresh+0x18>
		}

		//RED
		for(int8_t k=7; k>=0; k--)
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	713b      	strb	r3, [r7, #4]
 8001b70:	e024      	b.n	8001bbc <ws2811_refresh+0xb8>
		{
			if((ws2811_array[current_led].green & (1<<k)) == 0)
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <ws2811_refresh+0x178>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	4a41      	ldr	r2, [pc, #260]	; (8001c80 <ws2811_refresh+0x17c>)
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	440b      	add	r3, r1
 8001b80:	4413      	add	r3, r2
 8001b82:	3301      	adds	r3, #1
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001b8c:	fa42 f303 	asr.w	r3, r2, r3
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d104      	bne.n	8001ba2 <ws2811_refresh+0x9e>
				buffer[j] = zero;
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	4a3a      	ldr	r2, [pc, #232]	; (8001c84 <ws2811_refresh+0x180>)
 8001b9c:	21ff      	movs	r1, #255	; 0xff
 8001b9e:	54d1      	strb	r1, [r2, r3]
 8001ba0:	e003      	b.n	8001baa <ws2811_refresh+0xa6>
			else
				buffer[j] = one;
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	4a37      	ldr	r2, [pc, #220]	; (8001c84 <ws2811_refresh+0x180>)
 8001ba6:	21f0      	movs	r1, #240	; 0xf0
 8001ba8:	54d1      	strb	r1, [r2, r3]
			j++;
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	3301      	adds	r3, #1
 8001bae:	80fb      	strh	r3, [r7, #6]
		for(int8_t k=7; k>=0; k--)
 8001bb0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	713b      	strb	r3, [r7, #4]
 8001bbc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	dad6      	bge.n	8001b72 <ws2811_refresh+0x6e>
		}

		//BLUE
		for(int8_t k=7; k>=0; k--)
 8001bc4:	2307      	movs	r3, #7
 8001bc6:	70fb      	strb	r3, [r7, #3]
 8001bc8:	e024      	b.n	8001c14 <ws2811_refresh+0x110>
		{
		  	if((ws2811_array[current_led].blue & (1<<k)) == 0)
 8001bca:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <ws2811_refresh+0x178>)
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <ws2811_refresh+0x17c>)
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	440b      	add	r3, r1
 8001bd8:	4413      	add	r3, r2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be4:	fa42 f303 	asr.w	r3, r2, r3
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d104      	bne.n	8001bfa <ws2811_refresh+0xf6>
		  	  	buffer[j] = zero;
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <ws2811_refresh+0x180>)
 8001bf4:	21ff      	movs	r1, #255	; 0xff
 8001bf6:	54d1      	strb	r1, [r2, r3]
 8001bf8:	e003      	b.n	8001c02 <ws2811_refresh+0xfe>
		  	else
		  	  	buffer[j] = one;
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <ws2811_refresh+0x180>)
 8001bfe:	21f0      	movs	r1, #240	; 0xf0
 8001c00:	54d1      	strb	r1, [r2, r3]
		  	j++;
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	3301      	adds	r3, #1
 8001c06:	80fb      	strh	r3, [r7, #6]
		for(int8_t k=7; k>=0; k--)
 8001c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	70fb      	strb	r3, [r7, #3]
 8001c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	dad6      	bge.n	8001bca <ws2811_refresh+0xc6>
	for(current_led=0; current_led<2; current_led++)
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <ws2811_refresh+0x178>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <ws2811_refresh+0x178>)
 8001c26:	801a      	strh	r2, [r3, #0]
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <ws2811_refresh+0x178>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	f67f af72 	bls.w	8001b16 <ws2811_refresh+0x12>
		}
	}


	if(! LL_DMA_IsEnabledChannel(DMA1, LL_DMA_CHANNEL_1))
 8001c32:	2101      	movs	r1, #1
 8001c34:	4814      	ldr	r0, [pc, #80]	; (8001c88 <ws2811_refresh+0x184>)
 8001c36:	f7ff fd87 	bl	8001748 <LL_DMA_IsEnabledChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d118      	bne.n	8001c72 <ws2811_refresh+0x16e>
	{
		LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, (uint32_t)buffer, LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT), LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001c40:	4c10      	ldr	r4, [pc, #64]	; (8001c84 <ws2811_refresh+0x180>)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4811      	ldr	r0, [pc, #68]	; (8001c8c <ws2811_refresh+0x188>)
 8001c46:	f7ff ff46 	bl	8001ad6 <LL_USART_DMA_GetRegAddr>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	9200      	str	r2, [sp, #0]
 8001c50:	4622      	mov	r2, r4
 8001c52:	2101      	movs	r1, #1
 8001c54:	480c      	ldr	r0, [pc, #48]	; (8001c88 <ws2811_refresh+0x184>)
 8001c56:	f7ff fde7 	bl	8001828 <LL_DMA_ConfigAddresses>

		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 48);
 8001c5a:	2230      	movs	r2, #48	; 0x30
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	480a      	ldr	r0, [pc, #40]	; (8001c88 <ws2811_refresh+0x184>)
 8001c60:	f7ff fda0 	bl	80017a4 <LL_DMA_SetDataLength>
		LL_USART_EnableDMAReq_TX(USART1);
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <ws2811_refresh+0x188>)
 8001c66:	f7ff ff13 	bl	8001a90 <LL_USART_EnableDMAReq_TX>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	4806      	ldr	r0, [pc, #24]	; (8001c88 <ws2811_refresh+0x184>)
 8001c6e:	f7ff fceb 	bl	8001648 <LL_DMA_EnableChannel>
	}
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200000a4 	.word	0x200000a4
 8001c80:	200000d8 	.word	0x200000d8
 8001c84:	200000a8 	.word	0x200000a8
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40013800 	.word	0x40013800

08001c90 <ws2811_refresh_IRQ>:


void ws2811_refresh_IRQ(void)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af02      	add	r7, sp, #8
	if(LL_DMA_IsActiveFlag_HT1(DMA1))
 8001c96:	489a      	ldr	r0, [pc, #616]	; (8001f00 <ws2811_refresh_IRQ+0x270>)
 8001c98:	f7ff fe4d 	bl	8001936 <LL_DMA_IsActiveFlag_HT1>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 809d 	beq.w	8001dde <ws2811_refresh_IRQ+0x14e>
	{
		LL_DMA_ClearFlag_HT1(DMA1);
 8001ca4:	4896      	ldr	r0, [pc, #600]	; (8001f00 <ws2811_refresh_IRQ+0x270>)
 8001ca6:	f7ff fe66 	bl	8001976 <LL_DMA_ClearFlag_HT1>

		uint16_t j = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	81fb      	strh	r3, [r7, #14]
		current_led++;
 8001cae:	4b95      	ldr	r3, [pc, #596]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4b93      	ldr	r3, [pc, #588]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001cb8:	801a      	strh	r2, [r3, #0]
		if(current_led > WS2811_LEDS)
 8001cba:	4b92      	ldr	r3, [pc, #584]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8001cc2:	d309      	bcc.n	8001cd8 <ws2811_refresh_IRQ+0x48>
			{
				LL_DMA_ClearFlag_HT1(DMA1);
 8001cc4:	488e      	ldr	r0, [pc, #568]	; (8001f00 <ws2811_refresh_IRQ+0x270>)
 8001cc6:	f7ff fe56 	bl	8001976 <LL_DMA_ClearFlag_HT1>
				LL_DMA_ClearFlag_TC1(DMA1);
 8001cca:	488d      	ldr	r0, [pc, #564]	; (8001f00 <ws2811_refresh_IRQ+0x270>)
 8001ccc:	f7ff fe46 	bl	800195c <LL_DMA_ClearFlag_TC1>
				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	488b      	ldr	r0, [pc, #556]	; (8001f00 <ws2811_refresh_IRQ+0x270>)
 8001cd4:	f7ff fcf8 	bl	80016c8 <LL_DMA_DisableChannel>
			}

		for(int8_t k=7; k>=0; k--)
 8001cd8:	2307      	movs	r3, #7
 8001cda:	737b      	strb	r3, [r7, #13]
 8001cdc:	e023      	b.n	8001d26 <ws2811_refresh_IRQ+0x96>
		{
			if((ws2811_array[current_led].red & (1<<k)) == 0)
 8001cde:	4b89      	ldr	r3, [pc, #548]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4a88      	ldr	r2, [pc, #544]	; (8001f08 <ws2811_refresh_IRQ+0x278>)
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	440b      	add	r3, r1
 8001cec:	4413      	add	r3, r2
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cf6:	fa42 f303 	asr.w	r3, r2, r3
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d104      	bne.n	8001d0c <ws2811_refresh_IRQ+0x7c>
				buffer[j] = zero;
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	4a81      	ldr	r2, [pc, #516]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001d06:	21ff      	movs	r1, #255	; 0xff
 8001d08:	54d1      	strb	r1, [r2, r3]
 8001d0a:	e003      	b.n	8001d14 <ws2811_refresh_IRQ+0x84>
			else
				buffer[j] = one;
 8001d0c:	89fb      	ldrh	r3, [r7, #14]
 8001d0e:	4a7f      	ldr	r2, [pc, #508]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001d10:	21f0      	movs	r1, #240	; 0xf0
 8001d12:	54d1      	strb	r1, [r2, r3]
			j++;
 8001d14:	89fb      	ldrh	r3, [r7, #14]
 8001d16:	3301      	adds	r3, #1
 8001d18:	81fb      	strh	r3, [r7, #14]
		for(int8_t k=7; k>=0; k--)
 8001d1a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	737b      	strb	r3, [r7, #13]
 8001d26:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	dad7      	bge.n	8001cde <ws2811_refresh_IRQ+0x4e>
		}

					  	  		  //RED
		for(int8_t k=7; k>=0; k--)
 8001d2e:	2307      	movs	r3, #7
 8001d30:	733b      	strb	r3, [r7, #12]
 8001d32:	e024      	b.n	8001d7e <ws2811_refresh_IRQ+0xee>
		{
			if((ws2811_array[current_led].green & (1<<k)) == 0)
 8001d34:	4b73      	ldr	r3, [pc, #460]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4a73      	ldr	r2, [pc, #460]	; (8001f08 <ws2811_refresh_IRQ+0x278>)
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	440b      	add	r3, r1
 8001d42:	4413      	add	r3, r2
 8001d44:	3301      	adds	r3, #1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d4e:	fa42 f303 	asr.w	r3, r2, r3
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d104      	bne.n	8001d64 <ws2811_refresh_IRQ+0xd4>
				buffer[j] = zero;
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	4a6b      	ldr	r2, [pc, #428]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001d5e:	21ff      	movs	r1, #255	; 0xff
 8001d60:	54d1      	strb	r1, [r2, r3]
 8001d62:	e003      	b.n	8001d6c <ws2811_refresh_IRQ+0xdc>
			else
				buffer[j] = one;
 8001d64:	89fb      	ldrh	r3, [r7, #14]
 8001d66:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001d68:	21f0      	movs	r1, #240	; 0xf0
 8001d6a:	54d1      	strb	r1, [r2, r3]
			j++;
 8001d6c:	89fb      	ldrh	r3, [r7, #14]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	81fb      	strh	r3, [r7, #14]
		for(int8_t k=7; k>=0; k--)
 8001d72:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	733b      	strb	r3, [r7, #12]
 8001d7e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	dad6      	bge.n	8001d34 <ws2811_refresh_IRQ+0xa4>
			}

					  	  		  //BLUE
		for(int8_t k=7; k>=0; k--)
 8001d86:	2307      	movs	r3, #7
 8001d88:	72fb      	strb	r3, [r7, #11]
 8001d8a:	e024      	b.n	8001dd6 <ws2811_refresh_IRQ+0x146>
		{
			if((ws2811_array[current_led].blue & (1<<k)) == 0)
 8001d8c:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4a5d      	ldr	r2, [pc, #372]	; (8001f08 <ws2811_refresh_IRQ+0x278>)
 8001d94:	460b      	mov	r3, r1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	440b      	add	r3, r1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001da6:	fa42 f303 	asr.w	r3, r2, r3
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d104      	bne.n	8001dbc <ws2811_refresh_IRQ+0x12c>
				buffer[j] = zero;
 8001db2:	89fb      	ldrh	r3, [r7, #14]
 8001db4:	4a55      	ldr	r2, [pc, #340]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001db6:	21ff      	movs	r1, #255	; 0xff
 8001db8:	54d1      	strb	r1, [r2, r3]
 8001dba:	e003      	b.n	8001dc4 <ws2811_refresh_IRQ+0x134>
			else
				buffer[j] = one;
 8001dbc:	89fb      	ldrh	r3, [r7, #14]
 8001dbe:	4a53      	ldr	r2, [pc, #332]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001dc0:	21f0      	movs	r1, #240	; 0xf0
 8001dc2:	54d1      	strb	r1, [r2, r3]
			j++;
 8001dc4:	89fb      	ldrh	r3, [r7, #14]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	81fb      	strh	r3, [r7, #14]
		for(int8_t k=7; k>=0; k--)
 8001dca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	72fb      	strb	r3, [r7, #11]
 8001dd6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	dad6      	bge.n	8001d8c <ws2811_refresh_IRQ+0xfc>
		}
				//LL_DMA_ClearFlag_HT1(DMA1);
	}

	if(LL_DMA_IsActiveFlag_TC1(DMA1))
 8001dde:	4848      	ldr	r0, [pc, #288]	; (8001f00 <ws2811_refresh_IRQ+0x270>)
 8001de0:	f7ff fd96 	bl	8001910 <LL_DMA_IsActiveFlag_TC1>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80c7 	beq.w	8001f7a <ws2811_refresh_IRQ+0x2ea>
	{
		LL_DMA_ClearFlag_TC1(DMA1);
 8001dec:	4844      	ldr	r0, [pc, #272]	; (8001f00 <ws2811_refresh_IRQ+0x270>)
 8001dee:	f7ff fdb5 	bl	800195c <LL_DMA_ClearFlag_TC1>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001df2:	2101      	movs	r1, #1
 8001df4:	4842      	ldr	r0, [pc, #264]	; (8001f00 <ws2811_refresh_IRQ+0x270>)
 8001df6:	f7ff fc67 	bl	80016c8 <LL_DMA_DisableChannel>
		uint16_t j = 24;
 8001dfa:	2318      	movs	r3, #24
 8001dfc:	813b      	strh	r3, [r7, #8]
		current_led++;
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001e08:	801a      	strh	r2, [r3, #0]
		if(current_led > WS2811_LEDS)
 8001e0a:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8001e12:	d303      	bcc.n	8001e1c <ws2811_refresh_IRQ+0x18c>
		{
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001e14:	2101      	movs	r1, #1
 8001e16:	483a      	ldr	r0, [pc, #232]	; (8001f00 <ws2811_refresh_IRQ+0x270>)
 8001e18:	f7ff fc56 	bl	80016c8 <LL_DMA_DisableChannel>
		}

		//RED
		for(int8_t k=7; k>=0; k--)
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	e023      	b.n	8001e6a <ws2811_refresh_IRQ+0x1da>
		{
			if((ws2811_array[current_led].red & (1<<k)) == 0)
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	4619      	mov	r1, r3
 8001e28:	4a37      	ldr	r2, [pc, #220]	; (8001f08 <ws2811_refresh_IRQ+0x278>)
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	440b      	add	r3, r1
 8001e30:	4413      	add	r3, r2
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	fa42 f303 	asr.w	r3, r2, r3
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d104      	bne.n	8001e50 <ws2811_refresh_IRQ+0x1c0>
				buffer[j] = zero;
 8001e46:	893b      	ldrh	r3, [r7, #8]
 8001e48:	4a30      	ldr	r2, [pc, #192]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001e4a:	21ff      	movs	r1, #255	; 0xff
 8001e4c:	54d1      	strb	r1, [r2, r3]
 8001e4e:	e003      	b.n	8001e58 <ws2811_refresh_IRQ+0x1c8>
			else
				buffer[j] = one;
 8001e50:	893b      	ldrh	r3, [r7, #8]
 8001e52:	4a2e      	ldr	r2, [pc, #184]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001e54:	21f0      	movs	r1, #240	; 0xf0
 8001e56:	54d1      	strb	r1, [r2, r3]
			j++;
 8001e58:	893b      	ldrh	r3, [r7, #8]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	813b      	strh	r3, [r7, #8]
		for(int8_t k=7; k>=0; k--)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	71fb      	strb	r3, [r7, #7]
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	dad7      	bge.n	8001e22 <ws2811_refresh_IRQ+0x192>
		}

		//GREEN
		for(int8_t k=7; k>=0; k--)
 8001e72:	2307      	movs	r3, #7
 8001e74:	71bb      	strb	r3, [r7, #6]
 8001e76:	e024      	b.n	8001ec2 <ws2811_refresh_IRQ+0x232>
		{
			if((ws2811_array[current_led].green & (1<<k)) == 0)
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <ws2811_refresh_IRQ+0x278>)
 8001e80:	460b      	mov	r3, r1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	440b      	add	r3, r1
 8001e86:	4413      	add	r3, r2
 8001e88:	3301      	adds	r3, #1
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e92:	fa42 f303 	asr.w	r3, r2, r3
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d104      	bne.n	8001ea8 <ws2811_refresh_IRQ+0x218>
				buffer[j] = zero;
 8001e9e:	893b      	ldrh	r3, [r7, #8]
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001ea2:	21ff      	movs	r1, #255	; 0xff
 8001ea4:	54d1      	strb	r1, [r2, r3]
 8001ea6:	e003      	b.n	8001eb0 <ws2811_refresh_IRQ+0x220>
			else
				buffer[j] = one;
 8001ea8:	893b      	ldrh	r3, [r7, #8]
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001eac:	21f0      	movs	r1, #240	; 0xf0
 8001eae:	54d1      	strb	r1, [r2, r3]
			j++;
 8001eb0:	893b      	ldrh	r3, [r7, #8]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	813b      	strh	r3, [r7, #8]
		for(int8_t k=7; k>=0; k--)
 8001eb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	71bb      	strb	r3, [r7, #6]
 8001ec2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	dad6      	bge.n	8001e78 <ws2811_refresh_IRQ+0x1e8>
		}

		//BLUE
		for(int8_t k=7; k>=0; k--)
 8001eca:	2307      	movs	r3, #7
 8001ecc:	717b      	strb	r3, [r7, #5]
 8001ece:	e02c      	b.n	8001f2a <ws2811_refresh_IRQ+0x29a>
		{
			if((ws2811_array[current_led].blue & (1<<k)) == 0)
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <ws2811_refresh_IRQ+0x274>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <ws2811_refresh_IRQ+0x278>)
 8001ed8:	460b      	mov	r3, r1
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	440b      	add	r3, r1
 8001ede:	4413      	add	r3, r2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001eea:	fa42 f303 	asr.w	r3, r2, r3
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <ws2811_refresh_IRQ+0x280>
				buffer[j] = zero;
 8001ef6:	893b      	ldrh	r3, [r7, #8]
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <ws2811_refresh_IRQ+0x27c>)
 8001efa:	21ff      	movs	r1, #255	; 0xff
 8001efc:	54d1      	strb	r1, [r2, r3]
 8001efe:	e00b      	b.n	8001f18 <ws2811_refresh_IRQ+0x288>
 8001f00:	40020000 	.word	0x40020000
 8001f04:	200000a4 	.word	0x200000a4
 8001f08:	200000d8 	.word	0x200000d8
 8001f0c:	200000a8 	.word	0x200000a8
			else
				buffer[j] = one;
 8001f10:	893b      	ldrh	r3, [r7, #8]
 8001f12:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <ws2811_refresh_IRQ+0x2f4>)
 8001f14:	21f0      	movs	r1, #240	; 0xf0
 8001f16:	54d1      	strb	r1, [r2, r3]
			j++;
 8001f18:	893b      	ldrh	r3, [r7, #8]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	813b      	strh	r3, [r7, #8]
		for(int8_t k=7; k>=0; k--)
 8001f1e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	717b      	strb	r3, [r7, #5]
 8001f2a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	dace      	bge.n	8001ed0 <ws2811_refresh_IRQ+0x240>
		}

		LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, (uint32_t)buffer, LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT), LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001f32:	4c14      	ldr	r4, [pc, #80]	; (8001f84 <ws2811_refresh_IRQ+0x2f4>)
 8001f34:	2100      	movs	r1, #0
 8001f36:	4814      	ldr	r0, [pc, #80]	; (8001f88 <ws2811_refresh_IRQ+0x2f8>)
 8001f38:	f7ff fdcd 	bl	8001ad6 <LL_USART_DMA_GetRegAddr>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2210      	movs	r2, #16
 8001f40:	9200      	str	r2, [sp, #0]
 8001f42:	4622      	mov	r2, r4
 8001f44:	2101      	movs	r1, #1
 8001f46:	4811      	ldr	r0, [pc, #68]	; (8001f8c <ws2811_refresh_IRQ+0x2fc>)
 8001f48:	f7ff fc6e 	bl	8001828 <LL_DMA_ConfigAddresses>

		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 48);
 8001f4c:	2230      	movs	r2, #48	; 0x30
 8001f4e:	2101      	movs	r1, #1
 8001f50:	480e      	ldr	r0, [pc, #56]	; (8001f8c <ws2811_refresh_IRQ+0x2fc>)
 8001f52:	f7ff fc27 	bl	80017a4 <LL_DMA_SetDataLength>
		LL_USART_EnableDMAReq_TX(USART1);
 8001f56:	480c      	ldr	r0, [pc, #48]	; (8001f88 <ws2811_refresh_IRQ+0x2f8>)
 8001f58:	f7ff fd9a 	bl	8001a90 <LL_USART_EnableDMAReq_TX>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	480b      	ldr	r0, [pc, #44]	; (8001f8c <ws2811_refresh_IRQ+0x2fc>)
 8001f60:	f7ff fb72 	bl	8001648 <LL_DMA_EnableChannel>

		NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f64:	200b      	movs	r0, #11
 8001f66:	f7ff fb51 	bl	800160c <__NVIC_EnableIRQ>
		LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4807      	ldr	r0, [pc, #28]	; (8001f8c <ws2811_refresh_IRQ+0x2fc>)
 8001f6e:	f7ff fd0f 	bl	8001990 <LL_DMA_EnableIT_TC>
		LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_1);
 8001f72:	2101      	movs	r1, #1
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <ws2811_refresh_IRQ+0x2fc>)
 8001f76:	f7ff fd4b 	bl	8001a10 <LL_DMA_EnableIT_HT>

	}
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200000a8 	.word	0x200000a8
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40020000 	.word	0x40020000

08001f90 <ws2811_set_diode_HSV>:

void ws2811_set_diode_HSV(int16_t diode_id, uint16_t hue, uint8_t saturation, uint8_t brightness)
{
 8001f90:	b490      	push	{r4, r7}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4604      	mov	r4, r0
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	80fb      	strh	r3, [r7, #6]
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80bb      	strh	r3, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	70fb      	strb	r3, [r7, #3]
 8001faa:	4613      	mov	r3, r2
 8001fac:	70bb      	strb	r3, [r7, #2]
	if(diode_id >= WS2811_LEDS || diode_id < 0)
 8001fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001fb6:	f300 8151 	bgt.w	800225c <ws2811_set_diode_HSV+0x2cc>
 8001fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f2c0 814c 	blt.w	800225c <ws2811_set_diode_HSV+0x2cc>
		return;
	}

	uint16_t sector, fracts, p, q, t;

	if(saturation == 0)
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11d      	bne.n	8002006 <ws2811_set_diode_HSV+0x76>
	{
		ws2811_array[diode_id].red = brightness;
 8001fca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fce:	49a6      	ldr	r1, [pc, #664]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	78ba      	ldrb	r2, [r7, #2]
 8001fda:	701a      	strb	r2, [r3, #0]
		ws2811_array[diode_id].green = brightness;
 8001fdc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fe0:	49a1      	ldr	r1, [pc, #644]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3301      	adds	r3, #1
 8001fec:	78ba      	ldrb	r2, [r7, #2]
 8001fee:	701a      	strb	r2, [r3, #0]
		ws2811_array[diode_id].blue = brightness;
 8001ff0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ff4:	499c      	ldr	r1, [pc, #624]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3302      	adds	r3, #2
 8002000:	78ba      	ldrb	r2, [r7, #2]
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e12b      	b.n	800225e <ws2811_set_diode_HSV+0x2ce>
	}
	else
	{
		if(hue >= 360) hue = 359;
 8002006:	88bb      	ldrh	r3, [r7, #4]
 8002008:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800200c:	d302      	bcc.n	8002014 <ws2811_set_diode_HSV+0x84>
 800200e:	f240 1367 	movw	r3, #359	; 0x167
 8002012:	80bb      	strh	r3, [r7, #4]

		sector = hue / 60;		// sector 0 to 5
 8002014:	88bb      	ldrh	r3, [r7, #4]
 8002016:	4a95      	ldr	r2, [pc, #596]	; (800226c <ws2811_set_diode_HSV+0x2dc>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	82fb      	strh	r3, [r7, #22]
		fracts = hue % 60;
 8002020:	88ba      	ldrh	r2, [r7, #4]
 8002022:	4b92      	ldr	r3, [pc, #584]	; (800226c <ws2811_set_diode_HSV+0x2dc>)
 8002024:	fba3 1302 	umull	r1, r3, r3, r2
 8002028:	0959      	lsrs	r1, r3, #5
 800202a:	460b      	mov	r3, r1
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a5b      	subs	r3, r3, r1
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	82bb      	strh	r3, [r7, #20]
		p = (brightness * (255 - saturation)) / 256;
 8002036:	78bb      	ldrb	r3, [r7, #2]
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	da00      	bge.n	8002048 <ws2811_set_diode_HSV+0xb8>
 8002046:	33ff      	adds	r3, #255	; 0xff
 8002048:	121b      	asrs	r3, r3, #8
 800204a:	827b      	strh	r3, [r7, #18]
		q = (brightness * (255 - (saturation * fracts) / 60)) / 256;
 800204c:	78ba      	ldrb	r2, [r7, #2]
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	8ab9      	ldrh	r1, [r7, #20]
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4985      	ldr	r1, [pc, #532]	; (800226c <ws2811_set_diode_HSV+0x2dc>)
 8002058:	fb81 0103 	smull	r0, r1, r1, r3
 800205c:	4419      	add	r1, r3
 800205e:	1149      	asrs	r1, r1, #5
 8002060:	17db      	asrs	r3, r3, #31
 8002062:	1a5b      	subs	r3, r3, r1
 8002064:	33ff      	adds	r3, #255	; 0xff
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	da00      	bge.n	8002070 <ws2811_set_diode_HSV+0xe0>
 800206e:	33ff      	adds	r3, #255	; 0xff
 8002070:	121b      	asrs	r3, r3, #8
 8002072:	823b      	strh	r3, [r7, #16]
	t = (brightness * (255 - (saturation * (59 - fracts)) / 60)) / 256;
 8002074:	78ba      	ldrb	r2, [r7, #2]
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	8ab9      	ldrh	r1, [r7, #20]
 800207a:	f1c1 013b 	rsb	r1, r1, #59	; 0x3b
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	497a      	ldr	r1, [pc, #488]	; (800226c <ws2811_set_diode_HSV+0x2dc>)
 8002084:	fb81 0103 	smull	r0, r1, r1, r3
 8002088:	4419      	add	r1, r3
 800208a:	1149      	asrs	r1, r1, #5
 800208c:	17db      	asrs	r3, r3, #31
 800208e:	1a5b      	subs	r3, r3, r1
 8002090:	33ff      	adds	r3, #255	; 0xff
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	da00      	bge.n	800209c <ws2811_set_diode_HSV+0x10c>
 800209a:	33ff      	adds	r3, #255	; 0xff
 800209c:	121b      	asrs	r3, r3, #8
 800209e:	81fb      	strh	r3, [r7, #14]

		switch (sector)
 80020a0:	8afb      	ldrh	r3, [r7, #22]
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	f200 80b8 	bhi.w	8002218 <ws2811_set_diode_HSV+0x288>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <ws2811_set_diode_HSV+0x120>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020c5 	.word	0x080020c5
 80020b4:	08002109 	.word	0x08002109
 80020b8:	0800214d 	.word	0x0800214d
 80020bc:	08002191 	.word	0x08002191
 80020c0:	080021d5 	.word	0x080021d5
		{
			case 0:
				ws2811_array[diode_id].red = brightness;
 80020c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020c8:	4967      	ldr	r1, [pc, #412]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	78ba      	ldrb	r2, [r7, #2]
 80020d4:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].green = (uint8_t)t;
 80020d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020da:	89fb      	ldrh	r3, [r7, #14]
 80020dc:	b2d8      	uxtb	r0, r3
 80020de:	4962      	ldr	r1, [pc, #392]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	3301      	adds	r3, #1
 80020ea:	4602      	mov	r2, r0
 80020ec:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].blue = (uint8_t)p;
 80020ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020f2:	8a7b      	ldrh	r3, [r7, #18]
 80020f4:	b2d8      	uxtb	r0, r3
 80020f6:	495c      	ldr	r1, [pc, #368]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	440b      	add	r3, r1
 8002100:	3302      	adds	r3, #2
 8002102:	4602      	mov	r2, r0
 8002104:	701a      	strb	r2, [r3, #0]
				break;
 8002106:	e0aa      	b.n	800225e <ws2811_set_diode_HSV+0x2ce>
			case 1:
				ws2811_array[diode_id].red = (uint8_t)q;
 8002108:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800210c:	8a3b      	ldrh	r3, [r7, #16]
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	4955      	ldr	r1, [pc, #340]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	440b      	add	r3, r1
 800211a:	4602      	mov	r2, r0
 800211c:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].green = brightness;
 800211e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002122:	4951      	ldr	r1, [pc, #324]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	440b      	add	r3, r1
 800212c:	3301      	adds	r3, #1
 800212e:	78ba      	ldrb	r2, [r7, #2]
 8002130:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].blue = (uint8_t)p;
 8002132:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002136:	8a7b      	ldrh	r3, [r7, #18]
 8002138:	b2d8      	uxtb	r0, r3
 800213a:	494b      	ldr	r1, [pc, #300]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	440b      	add	r3, r1
 8002144:	3302      	adds	r3, #2
 8002146:	4602      	mov	r2, r0
 8002148:	701a      	strb	r2, [r3, #0]
				break;
 800214a:	e088      	b.n	800225e <ws2811_set_diode_HSV+0x2ce>
			case 2:
				ws2811_array[diode_id].red = (uint8_t)p;
 800214c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002150:	8a7b      	ldrh	r3, [r7, #18]
 8002152:	b2d8      	uxtb	r0, r3
 8002154:	4944      	ldr	r1, [pc, #272]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	440b      	add	r3, r1
 800215e:	4602      	mov	r2, r0
 8002160:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].green = brightness;
 8002162:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002166:	4940      	ldr	r1, [pc, #256]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	440b      	add	r3, r1
 8002170:	3301      	adds	r3, #1
 8002172:	78ba      	ldrb	r2, [r7, #2]
 8002174:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].blue = (uint8_t)t;
 8002176:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800217a:	89fb      	ldrh	r3, [r7, #14]
 800217c:	b2d8      	uxtb	r0, r3
 800217e:	493a      	ldr	r1, [pc, #232]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	440b      	add	r3, r1
 8002188:	3302      	adds	r3, #2
 800218a:	4602      	mov	r2, r0
 800218c:	701a      	strb	r2, [r3, #0]
				break;
 800218e:	e066      	b.n	800225e <ws2811_set_diode_HSV+0x2ce>
			case 3:
				ws2811_array[diode_id].red = (uint8_t)p;
 8002190:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002194:	8a7b      	ldrh	r3, [r7, #18]
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	4933      	ldr	r1, [pc, #204]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	4602      	mov	r2, r0
 80021a4:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].green = (uint8_t)q;
 80021a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021aa:	8a3b      	ldrh	r3, [r7, #16]
 80021ac:	b2d8      	uxtb	r0, r3
 80021ae:	492e      	ldr	r1, [pc, #184]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	3301      	adds	r3, #1
 80021ba:	4602      	mov	r2, r0
 80021bc:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].blue = brightness;
 80021be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021c2:	4929      	ldr	r1, [pc, #164]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	3302      	adds	r3, #2
 80021ce:	78ba      	ldrb	r2, [r7, #2]
 80021d0:	701a      	strb	r2, [r3, #0]
				break;
 80021d2:	e044      	b.n	800225e <ws2811_set_diode_HSV+0x2ce>
			case 4:
				ws2811_array[diode_id].red = (uint8_t)t;
 80021d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021d8:	89fb      	ldrh	r3, [r7, #14]
 80021da:	b2d8      	uxtb	r0, r3
 80021dc:	4922      	ldr	r1, [pc, #136]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	4602      	mov	r2, r0
 80021e8:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].green = (uint8_t)p;
 80021ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021ee:	8a7b      	ldrh	r3, [r7, #18]
 80021f0:	b2d8      	uxtb	r0, r3
 80021f2:	491d      	ldr	r1, [pc, #116]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	440b      	add	r3, r1
 80021fc:	3301      	adds	r3, #1
 80021fe:	4602      	mov	r2, r0
 8002200:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].blue = brightness;
 8002202:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002206:	4918      	ldr	r1, [pc, #96]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	440b      	add	r3, r1
 8002210:	3302      	adds	r3, #2
 8002212:	78ba      	ldrb	r2, [r7, #2]
 8002214:	701a      	strb	r2, [r3, #0]
				break;
 8002216:	e022      	b.n	800225e <ws2811_set_diode_HSV+0x2ce>
			default:	// case5
				ws2811_array[diode_id].red = brightness;
 8002218:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800221c:	4912      	ldr	r1, [pc, #72]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	440b      	add	r3, r1
 8002226:	78ba      	ldrb	r2, [r7, #2]
 8002228:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].green = (uint8_t)p;
 800222a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800222e:	8a7b      	ldrh	r3, [r7, #18]
 8002230:	b2d8      	uxtb	r0, r3
 8002232:	490d      	ldr	r1, [pc, #52]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	440b      	add	r3, r1
 800223c:	3301      	adds	r3, #1
 800223e:	4602      	mov	r2, r0
 8002240:	701a      	strb	r2, [r3, #0]
				ws2811_array[diode_id].blue = (uint8_t)q;
 8002242:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002246:	8a3b      	ldrh	r3, [r7, #16]
 8002248:	b2d8      	uxtb	r0, r3
 800224a:	4907      	ldr	r1, [pc, #28]	; (8002268 <ws2811_set_diode_HSV+0x2d8>)
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	440b      	add	r3, r1
 8002254:	3302      	adds	r3, #2
 8002256:	4602      	mov	r2, r0
 8002258:	701a      	strb	r2, [r3, #0]
				break;
 800225a:	e000      	b.n	800225e <ws2811_set_diode_HSV+0x2ce>
		return;
 800225c:	bf00      	nop
		}
	}
}
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bc90      	pop	{r4, r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	200000d8 	.word	0x200000d8
 800226c:	88888889 	.word	0x88888889

08002270 <WS2811_set_color_HSV>:
     }
	 LL_mDelay(5);
}

void WS2811_set_color_HSV(uint16_t color, uint8_t saturation, uint8_t brightness, uint16_t first_led, uint16_t last_led)
	{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	4604      	mov	r4, r0
 8002278:	4608      	mov	r0, r1
 800227a:	4611      	mov	r1, r2
 800227c:	461a      	mov	r2, r3
 800227e:	4623      	mov	r3, r4
 8002280:	80fb      	strh	r3, [r7, #6]
 8002282:	4603      	mov	r3, r0
 8002284:	717b      	strb	r3, [r7, #5]
 8002286:	460b      	mov	r3, r1
 8002288:	713b      	strb	r3, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	807b      	strh	r3, [r7, #2]
	for(uint16_t id_led_tmp = first_led; id_led_tmp <= last_led; id_led_tmp++ )
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	81fb      	strh	r3, [r7, #14]
 8002292:	e009      	b.n	80022a8 <WS2811_set_color_HSV+0x38>
	{
			ws2811_set_diode_HSV(id_led_tmp, color, saturation, brightness);
 8002294:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002298:	793b      	ldrb	r3, [r7, #4]
 800229a:	797a      	ldrb	r2, [r7, #5]
 800229c:	88f9      	ldrh	r1, [r7, #6]
 800229e:	f7ff fe77 	bl	8001f90 <ws2811_set_diode_HSV>
	for(uint16_t id_led_tmp = first_led; id_led_tmp <= last_led; id_led_tmp++ )
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	3301      	adds	r3, #1
 80022a6:	81fb      	strh	r3, [r7, #14]
 80022a8:	89fa      	ldrh	r2, [r7, #14]
 80022aa:	8c3b      	ldrh	r3, [r7, #32]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d9f1      	bls.n	8002294 <WS2811_set_color_HSV+0x24>
	}
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}

080022ba <WS2811_flash>:

void WS2811_flash(uint16_t color, uint8_t brightness, uint16_t first_led, uint16_t last_led)
{
 80022ba:	b590      	push	{r4, r7, lr}
 80022bc:	b087      	sub	sp, #28
 80022be:	af02      	add	r7, sp, #8
 80022c0:	4604      	mov	r4, r0
 80022c2:	4608      	mov	r0, r1
 80022c4:	4611      	mov	r1, r2
 80022c6:	461a      	mov	r2, r3
 80022c8:	4623      	mov	r3, r4
 80022ca:	80fb      	strh	r3, [r7, #6]
 80022cc:	4603      	mov	r3, r0
 80022ce:	717b      	strb	r3, [r7, #5]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	803b      	strh	r3, [r7, #0]
	uint16_t random_id_led;
	WS2811_set_color_HSV(color, 0xff, brightness, first_led, last_led);
 80022d8:	8879      	ldrh	r1, [r7, #2]
 80022da:	797a      	ldrb	r2, [r7, #5]
 80022dc:	88f8      	ldrh	r0, [r7, #6]
 80022de:	883b      	ldrh	r3, [r7, #0]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	460b      	mov	r3, r1
 80022e4:	21ff      	movs	r1, #255	; 0xff
 80022e6:	f7ff ffc3 	bl	8002270 <WS2811_set_color_HSV>
	random_id_led = rand()%(last_led - first_led) + first_led;
 80022ea:	f000 ff25 	bl	8003138 <rand>
 80022ee:	4602      	mov	r2, r0
 80022f0:	8839      	ldrh	r1, [r7, #0]
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	1acb      	subs	r3, r1, r3
 80022f6:	fb92 f1f3 	sdiv	r1, r2, r3
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	b29a      	uxth	r2, r3
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	4413      	add	r3, r2
 8002306:	81fb      	strh	r3, [r7, #14]
	ws2811_set_diode_HSV(random_id_led, 0xff, 0xff, 0xff);
 8002308:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800230c:	23ff      	movs	r3, #255	; 0xff
 800230e:	22ff      	movs	r2, #255	; 0xff
 8002310:	21ff      	movs	r1, #255	; 0xff
 8002312:	f7ff fe3d 	bl	8001f90 <ws2811_set_diode_HSV>
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
	...

08002320 <WS2811_flash_color>:

void WS2811_flash_color(uint16_t first_led, uint16_t last_led, uint32_t time)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	603a      	str	r2, [r7, #0]
 800232a:	80fb      	strh	r3, [r7, #6]
 800232c:	460b      	mov	r3, r1
 800232e:	80bb      	strh	r3, [r7, #4]

	static uint32_t speed;

	if((GetTick() - speed) > time)
 8002330:	f7fe fc30 	bl	8000b94 <GetTick>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <WS2811_flash_color+0xa8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d23d      	bcs.n	80023c0 <WS2811_flash_color+0xa0>
	{
	speed = GetTick();
 8002344:	f7fe fc26 	bl	8000b94 <GetTick>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <WS2811_flash_color+0xa8>)
 800234e:	601a      	str	r2, [r3, #0]
	uint16_t id_led, color;
	uint8_t brightnes;
	id_led = rand()%WS2811_LEDS;
 8002350:	f000 fef2 	bl	8003138 <rand>
 8002354:	4603      	mov	r3, r0
 8002356:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <WS2811_flash_color+0xac>)
 8002358:	fb82 1203 	smull	r1, r2, r2, r3
 800235c:	1151      	asrs	r1, r2, #5
 800235e:	17da      	asrs	r2, r3, #31
 8002360:	1a8a      	subs	r2, r1, r2
 8002362:	f240 112d 	movw	r1, #301	; 0x12d
 8002366:	fb01 f202 	mul.w	r2, r1, r2
 800236a:	1a9a      	subs	r2, r3, r2
 800236c:	4613      	mov	r3, r2
 800236e:	81fb      	strh	r3, [r7, #14]
	color = rand()%360;
 8002370:	f000 fee2 	bl	8003138 <rand>
 8002374:	4603      	mov	r3, r0
 8002376:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <WS2811_flash_color+0xb0>)
 8002378:	fb82 1203 	smull	r1, r2, r2, r3
 800237c:	441a      	add	r2, r3
 800237e:	1211      	asrs	r1, r2, #8
 8002380:	17da      	asrs	r2, r3, #31
 8002382:	1a8a      	subs	r2, r1, r2
 8002384:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002388:	fb01 f202 	mul.w	r2, r1, r2
 800238c:	1a9a      	subs	r2, r3, r2
 800238e:	4613      	mov	r3, r2
 8002390:	81bb      	strh	r3, [r7, #12]
	brightnes = rand()%255;
 8002392:	f000 fed1 	bl	8003138 <rand>
 8002396:	4602      	mov	r2, r0
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <WS2811_flash_color+0xb4>)
 800239a:	fb83 1302 	smull	r1, r3, r3, r2
 800239e:	4413      	add	r3, r2
 80023a0:	11d9      	asrs	r1, r3, #7
 80023a2:	17d3      	asrs	r3, r2, #31
 80023a4:	1ac9      	subs	r1, r1, r3
 80023a6:	460b      	mov	r3, r1
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	1a5b      	subs	r3, r3, r1
 80023ac:	1ad1      	subs	r1, r2, r3
 80023ae:	460b      	mov	r3, r1
 80023b0:	72fb      	strb	r3, [r7, #11]
	ws2811_set_diode_HSV(id_led, color, 0xff, brightnes);
 80023b2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80023b6:	7afb      	ldrb	r3, [r7, #11]
 80023b8:	89b9      	ldrh	r1, [r7, #12]
 80023ba:	22ff      	movs	r2, #255	; 0xff
 80023bc:	f7ff fde8 	bl	8001f90 <ws2811_set_diode_HSV>
	}
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000460 	.word	0x20000460
 80023cc:	1b37484b 	.word	0x1b37484b
 80023d0:	b60b60b7 	.word	0xb60b60b7
 80023d4:	80808081 	.word	0x80808081

080023d8 <WS2811_snake>:

void WS2811_snake(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
	static uint8_t direction;
	static uint16_t counter1;
	static uint16_t counter2;

	if(direction == 1)
 80023de:	4b5d      	ldr	r3, [pc, #372]	; (8002554 <WS2811_snake+0x17c>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d157      	bne.n	8002496 <WS2811_snake+0xbe>
	{
		counter1++;
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <WS2811_snake+0x180>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <WS2811_snake+0x180>)
 80023f0:	801a      	strh	r2, [r3, #0]
		counter2--;
 80023f2:	4b5a      	ldr	r3, [pc, #360]	; (800255c <WS2811_snake+0x184>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b58      	ldr	r3, [pc, #352]	; (800255c <WS2811_snake+0x184>)
 80023fc:	801a      	strh	r2, [r3, #0]

		ws2811_set_diode_HSV(counter1 - 1, 260, 0xff, 0x3);
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <WS2811_snake+0x180>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	3b01      	subs	r3, #1
 8002404:	b29b      	uxth	r3, r3
 8002406:	b218      	sxth	r0, r3
 8002408:	2303      	movs	r3, #3
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002410:	f7ff fdbe 	bl	8001f90 <ws2811_set_diode_HSV>
		for(uint8_t i = 0; i < 32; i++)
 8002414:	2300      	movs	r3, #0
 8002416:	71fb      	strb	r3, [r7, #7]
 8002418:	e010      	b.n	800243c <WS2811_snake+0x64>
		{
			ws2811_set_diode_HSV(counter1 + i, 240, 0xff, i * 8);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	b29a      	uxth	r2, r3
 800241e:	4b4e      	ldr	r3, [pc, #312]	; (8002558 <WS2811_snake+0x180>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	b29b      	uxth	r3, r3
 8002426:	b218      	sxth	r0, r3
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	22ff      	movs	r2, #255	; 0xff
 8002430:	21f0      	movs	r1, #240	; 0xf0
 8002432:	f7ff fdad 	bl	8001f90 <ws2811_set_diode_HSV>
		for(uint8_t i = 0; i < 32; i++)
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	3301      	adds	r3, #1
 800243a:	71fb      	strb	r3, [r7, #7]
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b1f      	cmp	r3, #31
 8002440:	d9eb      	bls.n	800241a <WS2811_snake+0x42>
		}

		ws2811_set_diode_HSV(counter2 + 1, 20, 0xff, 0x3);
 8002442:	4b46      	ldr	r3, [pc, #280]	; (800255c <WS2811_snake+0x184>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	b29b      	uxth	r3, r3
 800244a:	b218      	sxth	r0, r3
 800244c:	2303      	movs	r3, #3
 800244e:	22ff      	movs	r2, #255	; 0xff
 8002450:	2114      	movs	r1, #20
 8002452:	f7ff fd9d 	bl	8001f90 <ws2811_set_diode_HSV>
		for(uint8_t i = 0; i < 32; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	71bb      	strb	r3, [r7, #6]
 800245a:	e010      	b.n	800247e <WS2811_snake+0xa6>
		{
			ws2811_set_diode_HSV(counter2 - i, 0, 0xff, i * 8);
 800245c:	4b3f      	ldr	r3, [pc, #252]	; (800255c <WS2811_snake+0x184>)
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	b29b      	uxth	r3, r3
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b29b      	uxth	r3, r3
 8002468:	b218      	sxth	r0, r3
 800246a:	79bb      	ldrb	r3, [r7, #6]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	22ff      	movs	r2, #255	; 0xff
 8002472:	2100      	movs	r1, #0
 8002474:	f7ff fd8c 	bl	8001f90 <ws2811_set_diode_HSV>
		for(uint8_t i = 0; i < 32; i++)
 8002478:	79bb      	ldrb	r3, [r7, #6]
 800247a:	3301      	adds	r3, #1
 800247c:	71bb      	strb	r3, [r7, #6]
 800247e:	79bb      	ldrb	r3, [r7, #6]
 8002480:	2b1f      	cmp	r3, #31
 8002482:	d9eb      	bls.n	800245c <WS2811_snake+0x84>
		}

		if(counter1 > WS2811_LEDS)
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <WS2811_snake+0x180>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800248c:	d35a      	bcc.n	8002544 <WS2811_snake+0x16c>
		{
			direction = 0;
 800248e:	4b31      	ldr	r3, [pc, #196]	; (8002554 <WS2811_snake+0x17c>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e056      	b.n	8002544 <WS2811_snake+0x16c>
		}
	}
	else
	{
		counter1--;
 8002496:	4b30      	ldr	r3, [pc, #192]	; (8002558 <WS2811_snake+0x180>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <WS2811_snake+0x180>)
 80024a0:	801a      	strh	r2, [r3, #0]
		counter2++;
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <WS2811_snake+0x184>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <WS2811_snake+0x184>)
 80024ac:	801a      	strh	r2, [r3, #0]

		ws2811_set_diode_HSV(counter2 - 1, 20, 0xff, 0x3);
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <WS2811_snake+0x184>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	b218      	sxth	r0, r3
 80024b8:	2303      	movs	r3, #3
 80024ba:	22ff      	movs	r2, #255	; 0xff
 80024bc:	2114      	movs	r1, #20
 80024be:	f7ff fd67 	bl	8001f90 <ws2811_set_diode_HSV>
		for(uint8_t i = 0; i < 32; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	717b      	strb	r3, [r7, #5]
 80024c6:	e010      	b.n	80024ea <WS2811_snake+0x112>
		{
			ws2811_set_diode_HSV(counter2 + i, 0, 0xff, i * 8);
 80024c8:	797b      	ldrb	r3, [r7, #5]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <WS2811_snake+0x184>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	b218      	sxth	r0, r3
 80024d6:	797b      	ldrb	r3, [r7, #5]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	22ff      	movs	r2, #255	; 0xff
 80024de:	2100      	movs	r1, #0
 80024e0:	f7ff fd56 	bl	8001f90 <ws2811_set_diode_HSV>
		for(uint8_t i = 0; i < 32; i++)
 80024e4:	797b      	ldrb	r3, [r7, #5]
 80024e6:	3301      	adds	r3, #1
 80024e8:	717b      	strb	r3, [r7, #5]
 80024ea:	797b      	ldrb	r3, [r7, #5]
 80024ec:	2b1f      	cmp	r3, #31
 80024ee:	d9eb      	bls.n	80024c8 <WS2811_snake+0xf0>
		}

		ws2811_set_diode_HSV(counter1 + 1, 260, 0xff, 0x3);
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <WS2811_snake+0x180>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b218      	sxth	r0, r3
 80024fa:	2303      	movs	r3, #3
 80024fc:	22ff      	movs	r2, #255	; 0xff
 80024fe:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002502:	f7ff fd45 	bl	8001f90 <ws2811_set_diode_HSV>
		for(uint8_t i = 0; i < 32; i++)
 8002506:	2300      	movs	r3, #0
 8002508:	713b      	strb	r3, [r7, #4]
 800250a:	e010      	b.n	800252e <WS2811_snake+0x156>
		{
			ws2811_set_diode_HSV(counter1 - i, 240, 0xff, i * 8);
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <WS2811_snake+0x180>)
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	793b      	ldrb	r3, [r7, #4]
 8002512:	b29b      	uxth	r3, r3
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	b29b      	uxth	r3, r3
 8002518:	b218      	sxth	r0, r3
 800251a:	793b      	ldrb	r3, [r7, #4]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	22ff      	movs	r2, #255	; 0xff
 8002522:	21f0      	movs	r1, #240	; 0xf0
 8002524:	f7ff fd34 	bl	8001f90 <ws2811_set_diode_HSV>
		for(uint8_t i = 0; i < 32; i++)
 8002528:	793b      	ldrb	r3, [r7, #4]
 800252a:	3301      	adds	r3, #1
 800252c:	713b      	strb	r3, [r7, #4]
 800252e:	793b      	ldrb	r3, [r7, #4]
 8002530:	2b1f      	cmp	r3, #31
 8002532:	d9eb      	bls.n	800250c <WS2811_snake+0x134>
		}

		if(counter1 > WS2811_LEDS)
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <WS2811_snake+0x180>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800253c:	d302      	bcc.n	8002544 <WS2811_snake+0x16c>
		{
			direction = 1;
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <WS2811_snake+0x17c>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
		}
		}
	LL_mDelay(50);
 8002544:	2032      	movs	r0, #50	; 0x32
 8002546:	f000 fd8d 	bl	8003064 <LL_mDelay>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000464 	.word	0x20000464
 8002558:	20000466 	.word	0x20000466
 800255c:	20000468 	.word	0x20000468

08002560 <WS2811_rainbow_flow>:

void WS2811_rainbow_flow(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
	static uint16_t counter1;
	uint16_t color2;

	for(uint16_t color1 = 0; color1 < 361; color1++)
 8002566:	2300      	movs	r3, #0
 8002568:	80bb      	strh	r3, [r7, #4]
 800256a:	e023      	b.n	80025b4 <WS2811_rainbow_flow+0x54>
	{
		if(color1 <= WS2811_LEDS)
 800256c:	88bb      	ldrh	r3, [r7, #4]
 800256e:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8002572:	d202      	bcs.n	800257a <WS2811_rainbow_flow+0x1a>
		{
			color2 = color1;
 8002574:	88bb      	ldrh	r3, [r7, #4]
 8002576:	80fb      	strh	r3, [r7, #6]
 8002578:	e002      	b.n	8002580 <WS2811_rainbow_flow+0x20>
		}
		else
		{
			color2 = WS2811_LEDS;
 800257a:	f240 132d 	movw	r3, #301	; 0x12d
 800257e:	80fb      	strh	r3, [r7, #6]
		}

	ws2811_set_diode_HSV(color2, (color1 + counter1)%360 , 0xff, 0xff);
 8002580:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002584:	88bb      	ldrh	r3, [r7, #4]
 8002586:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <WS2811_rainbow_flow+0x94>)
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <WS2811_rainbow_flow+0x98>)
 800258e:	fb82 1203 	smull	r1, r2, r2, r3
 8002592:	441a      	add	r2, r3
 8002594:	1211      	asrs	r1, r2, #8
 8002596:	17da      	asrs	r2, r3, #31
 8002598:	1a8a      	subs	r2, r1, r2
 800259a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800259e:	fb01 f202 	mul.w	r2, r1, r2
 80025a2:	1a9a      	subs	r2, r3, r2
 80025a4:	b291      	uxth	r1, r2
 80025a6:	23ff      	movs	r3, #255	; 0xff
 80025a8:	22ff      	movs	r2, #255	; 0xff
 80025aa:	f7ff fcf1 	bl	8001f90 <ws2811_set_diode_HSV>
	for(uint16_t color1 = 0; color1 < 361; color1++)
 80025ae:	88bb      	ldrh	r3, [r7, #4]
 80025b0:	3301      	adds	r3, #1
 80025b2:	80bb      	strh	r3, [r7, #4]
 80025b4:	88bb      	ldrh	r3, [r7, #4]
 80025b6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80025ba:	d9d7      	bls.n	800256c <WS2811_rainbow_flow+0xc>
	}
	counter1++;
 80025bc:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <WS2811_rainbow_flow+0x94>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <WS2811_rainbow_flow+0x94>)
 80025c6:	801a      	strh	r2, [r3, #0]
	counter1 = counter1 % 360;
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <WS2811_rainbow_flow+0x94>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	490b      	ldr	r1, [pc, #44]	; (80025fc <WS2811_rainbow_flow+0x9c>)
 80025d0:	fba1 1202 	umull	r1, r2, r1, r2
 80025d4:	0892      	lsrs	r2, r2, #2
 80025d6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80025da:	fb01 f202 	mul.w	r2, r1, r2
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <WS2811_rainbow_flow+0x94>)
 80025e4:	801a      	strh	r2, [r3, #0]
	LL_mDelay(2);
 80025e6:	2002      	movs	r0, #2
 80025e8:	f000 fd3c 	bl	8003064 <LL_mDelay>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000046a 	.word	0x2000046a
 80025f8:	b60b60b7 	.word	0xb60b60b7
 80025fc:	16c16c17 	.word	0x16c16c17

08002600 <color_change>:

void color_change (uint16_t time2)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	80fb      	strh	r3, [r7, #6]
	static uint32_t new_msTick2;
	static uint16_t step2;
	static uint16_t counter1;

	  if((GetTick() - new_msTick2) > time2)
 800260a:	f7fe fac3 	bl	8000b94 <GetTick>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <color_change+0x7c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1ad2      	subs	r2, r2, r3
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	429a      	cmp	r2, r3
 800261c:	d92a      	bls.n	8002674 <color_change+0x74>
	 	  {
	 		 step2++;
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <color_change+0x80>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <color_change+0x80>)
 8002628:	801a      	strh	r2, [r3, #0]

	 		 new_msTick2 = GetTick();
 800262a:	f7fe fab3 	bl	8000b94 <GetTick>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <color_change+0x7c>)
 8002634:	601a      	str	r2, [r3, #0]
	 		  if(step2 > WS2811_LEDS)
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <color_change+0x80>)
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800263e:	d310      	bcc.n	8002662 <color_change+0x62>
	 			  {
	 			  step2 = 0;
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <color_change+0x80>)
 8002642:	2200      	movs	r2, #0
 8002644:	801a      	strh	r2, [r3, #0]
	 			  counter1 += 60;
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <color_change+0x84>)
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	333c      	adds	r3, #60	; 0x3c
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <color_change+0x84>)
 8002650:	801a      	strh	r2, [r3, #0]
	 			  if(counter1 > 360) counter1 = 0;
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <color_change+0x84>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800265a:	d902      	bls.n	8002662 <color_change+0x62>
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <color_change+0x84>)
 800265e:	2200      	movs	r2, #0
 8002660:	801a      	strh	r2, [r3, #0]
	 			  }
	 		 ws2811_set_diode_HSV(step2, counter1 , 0xff, 0xff);
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <color_change+0x80>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b218      	sxth	r0, r3
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <color_change+0x84>)
 800266a:	8819      	ldrh	r1, [r3, #0]
 800266c:	23ff      	movs	r3, #255	; 0xff
 800266e:	22ff      	movs	r2, #255	; 0xff
 8002670:	f7ff fc8e 	bl	8001f90 <ws2811_set_diode_HSV>
	 	  }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000046c 	.word	0x2000046c
 8002680:	20000470 	.word	0x20000470
 8002684:	20000472 	.word	0x20000472

08002688 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002688:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268c:	3304      	adds	r3, #4

0800268e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800268e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002690:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002692:	d3f9      	bcc.n	8002688 <CopyDataInit>
  bx lr
 8002694:	4770      	bx	lr

08002696 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002696:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002698:	3004      	adds	r0, #4

0800269a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800269a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800269c:	d3fb      	bcc.n	8002696 <FillZerobss>
  bx lr
 800269e:	4770      	bx	lr

080026a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026a0:	480c      	ldr	r0, [pc, #48]	; (80026d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026a4:	f7fe fba2 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80026a8:	480b      	ldr	r0, [pc, #44]	; (80026d8 <LoopForever+0x6>)
 80026aa:	490c      	ldr	r1, [pc, #48]	; (80026dc <LoopForever+0xa>)
 80026ac:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <LoopForever+0xe>)
 80026ae:	2300      	movs	r3, #0
 80026b0:	f7ff ffed 	bl	800268e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80026b4:	480b      	ldr	r0, [pc, #44]	; (80026e4 <LoopForever+0x12>)
 80026b6:	490c      	ldr	r1, [pc, #48]	; (80026e8 <LoopForever+0x16>)
 80026b8:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <LoopForever+0x1a>)
 80026ba:	2300      	movs	r3, #0
 80026bc:	f7ff ffe7 	bl	800268e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80026c0:	480b      	ldr	r0, [pc, #44]	; (80026f0 <LoopForever+0x1e>)
 80026c2:	490c      	ldr	r1, [pc, #48]	; (80026f4 <LoopForever+0x22>)
 80026c4:	2300      	movs	r3, #0
 80026c6:	f7ff ffe8 	bl	800269a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ca:	f000 fd09 	bl	80030e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80026ce:	f7fe f957 	bl	8000980 <main>

080026d2 <LoopForever>:

LoopForever:
  b LoopForever
 80026d2:	e7fe      	b.n	80026d2 <LoopForever>
  ldr   r0, =_estack
 80026d4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80026d8:	20000008 	.word	0x20000008
 80026dc:	20000074 	.word	0x20000074
 80026e0:	080043e0 	.word	0x080043e0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80026e4:	20030000 	.word	0x20030000
 80026e8:	20030000 	.word	0x20030000
 80026ec:	0800444c 	.word	0x0800444c
  INIT_BSS _sbss, _ebss
 80026f0:	20000074 	.word	0x20000074
 80026f4:	20000484 	.word	0x20000484

080026f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <ADC1_IRQHandler>

080026fa <LL_GPIO_SetPinMode>:
{
 80026fa:	b480      	push	{r7}
 80026fc:	b08b      	sub	sp, #44	; 0x2c
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	613b      	str	r3, [r7, #16]
  return result;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e003      	b.n	800272c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2103      	movs	r1, #3
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	401a      	ands	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	61fb      	str	r3, [r7, #28]
  return result;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800274e:	2320      	movs	r3, #32
 8002750:	e003      	b.n	800275a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	601a      	str	r2, [r3, #0]
}
 8002768:	bf00      	nop
 800276a:	372c      	adds	r7, #44	; 0x2c
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_GPIO_SetPinOutputType>:
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	43db      	mvns	r3, r3
 8002788:	401a      	ands	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	431a      	orrs	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_GPIO_SetPinSpeed>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b08b      	sub	sp, #44	; 0x2c
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	613b      	str	r3, [r7, #16]
  return result;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80027ca:	2320      	movs	r3, #32
 80027cc:	e003      	b.n	80027d6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2103      	movs	r1, #3
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	401a      	ands	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	61fb      	str	r3, [r7, #28]
  return result;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e003      	b.n	8002804 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	431a      	orrs	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	609a      	str	r2, [r3, #8]
}
 8002812:	bf00      	nop
 8002814:	372c      	adds	r7, #44	; 0x2c
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_GPIO_SetPinPull>:
{
 800281e:	b480      	push	{r7}
 8002820:	b08b      	sub	sp, #44	; 0x2c
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	613b      	str	r3, [r7, #16]
  return result;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2103      	movs	r1, #3
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	401a      	ands	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	61fb      	str	r3, [r7, #28]
  return result;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002872:	2320      	movs	r3, #32
 8002874:	e003      	b.n	800287e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	431a      	orrs	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	60da      	str	r2, [r3, #12]
}
 800288c:	bf00      	nop
 800288e:	372c      	adds	r7, #44	; 0x2c
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_GPIO_SetAFPin_0_7>:
{
 8002898:	b480      	push	{r7}
 800289a:	b08b      	sub	sp, #44	; 0x2c
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a1a      	ldr	r2, [r3, #32]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	613b      	str	r3, [r7, #16]
  return result;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80028be:	2320      	movs	r3, #32
 80028c0:	e003      	b.n	80028ca <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	210f      	movs	r1, #15
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	401a      	ands	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	61fb      	str	r3, [r7, #28]
  return result;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e003      	b.n	80028f8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	431a      	orrs	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	bf00      	nop
 8002908:	372c      	adds	r7, #44	; 0x2c
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <LL_GPIO_SetAFPin_8_15>:
{
 8002912:	b480      	push	{r7}
 8002914:	b08b      	sub	sp, #44	; 0x2c
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	613b      	str	r3, [r7, #16]
  return result;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e003      	b.n	8002946 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	210f      	movs	r1, #15
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	401a      	ands	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	61fb      	str	r3, [r7, #28]
  return result;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e003      	b.n	8002976 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	431a      	orrs	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002984:	bf00      	nop
 8002986:	372c      	adds	r7, #44	; 0x2c
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	617b      	str	r3, [r7, #20]
  return result;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <LL_GPIO_Init+0x26>
    return 32U;
 80029b2:	2320      	movs	r3, #32
 80029b4:	e003      	b.n	80029be <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80029c0:	e057      	b.n	8002a72 <LL_GPIO_Init+0xe2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2101      	movs	r1, #1
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	4013      	ands	r3, r2
 80029d0:	623b      	str	r3, [r7, #32]

    if (currentpin != 0x00u)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d049      	beq.n	8002a6c <LL_GPIO_Init+0xdc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d003      	beq.n	80029e8 <LL_GPIO_Init+0x58>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d10d      	bne.n	8002a04 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	461a      	mov	r2, r3
 80029ee:	6a39      	ldr	r1, [r7, #32]
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fed7 	bl	80027a4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	461a      	mov	r2, r3
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff feb8 	bl	8002774 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	6a39      	ldr	r1, [r7, #32]
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff06 	bl	800281e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d121      	bne.n	8002a5e <LL_GPIO_Init+0xce>
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	60bb      	str	r3, [r7, #8]
  return result;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <LL_GPIO_Init+0xa4>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e003      	b.n	8002a3c <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008uL)
 8002a3c:	2b07      	cmp	r3, #7
 8002a3e:	d807      	bhi.n	8002a50 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6a39      	ldr	r1, [r7, #32]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff25 	bl	8002898 <LL_GPIO_SetAFPin_0_7>
 8002a4e:	e006      	b.n	8002a5e <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	461a      	mov	r2, r3
 8002a56:	6a39      	ldr	r1, [r7, #32]
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff5a 	bl	8002912 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	6a39      	ldr	r1, [r7, #32]
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fe47 	bl	80026fa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	3301      	adds	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1a0      	bne.n	80029c2 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a9c:	d101      	bne.n	8002aa2 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_RCC_HSI_IsReady>:
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac0:	d101      	bne.n	8002ac6 <LL_RCC_HSI_IsReady+0x18>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <LL_RCC_HSI_IsReady+0x1a>
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_RCC_LSE_IsReady>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d101      	bne.n	8002aea <LL_RCC_LSE_IsReady+0x18>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <LL_RCC_LSE_IsReady+0x1a>
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_RCC_MSI_GetRange>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b06:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2bb0      	cmp	r3, #176	; 0xb0
 8002b0c:	d901      	bls.n	8002b12 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002b0e:	23b0      	movs	r3, #176	; 0xb0
 8002b10:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002b12:	687b      	ldr	r3, [r7, #4]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_RCC_GetSysClkSource>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_RCC_GetAHBPrescaler>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_RCC_GetAPB2Prescaler>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_RCC_GetUSARTClockSource>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4013      	ands	r3, r2
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_RCC_PLL_GetN>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <LL_RCC_PLL_GetR>:
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <LL_RCC_PLL_GetDivider>:
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  /* USART1CLK clock frequency */
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ffb5 	bl	8002b68 <LL_RCC_GetUSARTClockSource>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d012      	beq.n	8002c2a <LL_RCC_GetUSARTClockFreq+0x3e>
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d819      	bhi.n	8002c3c <LL_RCC_GetUSARTClockFreq+0x50>
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d002      	beq.n	8002c12 <LL_RCC_GetUSARTClockFreq+0x26>
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d004      	beq.n	8002c1a <LL_RCC_GetUSARTClockFreq+0x2e>
 8002c10:	e014      	b.n	8002c3c <LL_RCC_GetUSARTClockFreq+0x50>
  {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      usart_frequency = RCC_GetSystemClockFreq();
 8002c12:	f000 f829 	bl	8002c68 <RCC_GetSystemClockFreq>
 8002c16:	60f8      	str	r0, [r7, #12]
      break;
 8002c18:	e01f      	b.n	8002c5a <LL_RCC_GetUSARTClockFreq+0x6e>

    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8002c1a:	f7ff ff48 	bl	8002aae <LL_RCC_HSI_IsReady>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d117      	bne.n	8002c54 <LL_RCC_GetUSARTClockFreq+0x68>
      {
        usart_frequency = HSI_VALUE;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <LL_RCC_GetUSARTClockFreq+0x78>)
 8002c26:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002c28:	e014      	b.n	8002c54 <LL_RCC_GetUSARTClockFreq+0x68>

    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8002c2a:	f7ff ff52 	bl	8002ad2 <LL_RCC_LSE_IsReady>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d111      	bne.n	8002c58 <LL_RCC_GetUSARTClockFreq+0x6c>
      {
        usart_frequency = LSE_VALUE;
 8002c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c38:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002c3a:	e00d      	b.n	8002c58 <LL_RCC_GetUSARTClockFreq+0x6c>

    case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
    default:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 8002c3c:	f000 f814 	bl	8002c68 <RCC_GetSystemClockFreq>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f86a 	bl	8002d1c <RCC_GetHCLK1ClockFreq>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f87c 	bl	8002d48 <RCC_GetPCLK2ClockFreq>
 8002c50:	60f8      	str	r0, [r7, #12]
      break;
 8002c52:	e002      	b.n	8002c5a <LL_RCC_GetUSARTClockFreq+0x6e>
      break;
 8002c54:	bf00      	nop
 8002c56:	e000      	b.n	8002c5a <LL_RCC_GetUSARTClockFreq+0x6e>
      break;
 8002c58:	bf00      	nop
  }
  return usart_frequency;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	00f42400 	.word	0x00f42400

08002c68 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock (SYSCLK) frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002c6e:	f7ff ff57 	bl	8002b20 <LL_RCC_GetSysClkSource>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	d83a      	bhi.n	8002cee <RCC_GetSystemClockFreq+0x86>
 8002c78:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <RCC_GetSystemClockFreq+0x18>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002cb5 	.word	0x08002cb5
 8002c84:	08002cef 	.word	0x08002cef
 8002c88:	08002cef 	.word	0x08002cef
 8002c8c:	08002cef 	.word	0x08002cef
 8002c90:	08002ccb 	.word	0x08002ccb
 8002c94:	08002cef 	.word	0x08002cef
 8002c98:	08002cef 	.word	0x08002cef
 8002c9c:	08002cef 	.word	0x08002cef
 8002ca0:	08002cd1 	.word	0x08002cd1
 8002ca4:	08002cef 	.word	0x08002cef
 8002ca8:	08002cef 	.word	0x08002cef
 8002cac:	08002cef 	.word	0x08002cef
 8002cb0:	08002ce7 	.word	0x08002ce7
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002cb4:	f7ff ff1f 	bl	8002af6 <LL_RCC_MSI_GetRange>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <RCC_GetSystemClockFreq+0xa8>)
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	607b      	str	r3, [r7, #4]
      break;
 8002cc8:	e01c      	b.n	8002d04 <RCC_GetSystemClockFreq+0x9c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <RCC_GetSystemClockFreq+0xac>)
 8002ccc:	607b      	str	r3, [r7, #4]
      break;
 8002cce:	e019      	b.n	8002d04 <RCC_GetSystemClockFreq+0x9c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cd0:	f7ff fedb 	bl	8002a8a <LL_RCC_HSE_IsEnabledDiv2>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <RCC_GetSystemClockFreq+0x78>
      {
        frequency = HSE_VALUE / 2U;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <RCC_GetSystemClockFreq+0xac>)
 8002cdc:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSE_VALUE;
      }
      break;
 8002cde:	e011      	b.n	8002d04 <RCC_GetSystemClockFreq+0x9c>
        frequency = HSE_VALUE;
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <RCC_GetSystemClockFreq+0xb0>)
 8002ce2:	607b      	str	r3, [r7, #4]
      break;
 8002ce4:	e00e      	b.n	8002d04 <RCC_GetSystemClockFreq+0x9c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002ce6:	f000 f847 	bl	8002d78 <RCC_PLL_GetFreqDomain_SYS>
 8002cea:	6078      	str	r0, [r7, #4]
      break;
 8002cec:	e00a      	b.n	8002d04 <RCC_GetSystemClockFreq+0x9c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002cee:	f7ff ff02 	bl	8002af6 <LL_RCC_MSI_GetRange>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <RCC_GetSystemClockFreq+0xa8>)
 8002cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d00:	607b      	str	r3, [r7, #4]
      break;
 8002d02:	bf00      	nop
  }

  return frequency;
 8002d04:	687b      	ldr	r3, [r7, #4]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	08004220 	.word	0x08004220
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	01e84800 	.word	0x01e84800

08002d1c <RCC_GetHCLK1ClockFreq>:
  * @brief  Return HCLK1 clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK1ClockFreq(uint32_t SYSCLK_Frequency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002d24:	f7ff ff08 	bl	8002b38 <LL_RCC_GetAHBPrescaler>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <RCC_GetHCLK1ClockFreq+0x28>)
 8002d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	080041c0 	.word	0x080041c0

08002d48 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002d50:	f7ff fefe 	bl	8002b50 <LL_RCC_GetAPB2Prescaler>
 8002d54:	4603      	mov	r3, r0
 8002d56:	0adb      	lsrs	r3, r3, #11
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <RCC_GetPCLK2ClockFreq+0x2c>)
 8002d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	08004200 	.word	0x08004200

08002d78 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock (PLLRCLK) frequency used for system domain
  * @retval PLLRCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002d7e:	f7ff ff28 	bl	8002bd2 <LL_RCC_PLL_GetMainSource>
 8002d82:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d017      	beq.n	8002dba <RCC_PLL_GetFreqDomain_SYS+0x42>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d81f      	bhi.n	8002dd0 <RCC_PLL_GetFreqDomain_SYS+0x58>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d003      	beq.n	8002d9e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d00b      	beq.n	8002db4 <RCC_PLL_GetFreqDomain_SYS+0x3c>
 8002d9c:	e018      	b.n	8002dd0 <RCC_PLL_GetFreqDomain_SYS+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d9e:	f7ff feaa 	bl	8002af6 <LL_RCC_MSI_GetRange>
 8002da2:	4603      	mov	r3, r0
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	4a1b      	ldr	r2, [pc, #108]	; (8002e18 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	607b      	str	r3, [r7, #4]
      break;
 8002db2:	e018      	b.n	8002de6 <RCC_PLL_GetFreqDomain_SYS+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 8002db6:	607b      	str	r3, [r7, #4]
      break;
 8002db8:	e015      	b.n	8002de6 <RCC_PLL_GetFreqDomain_SYS+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002dba:	f7ff fe66 	bl	8002a8a <LL_RCC_HSE_IsEnabledDiv2>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d102      	bne.n	8002dca <RCC_PLL_GetFreqDomain_SYS+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 8002dc6:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8002dc8:	e00d      	b.n	8002de6 <RCC_PLL_GetFreqDomain_SYS+0x6e>
        pllinputfreq = HSE_VALUE;
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <RCC_PLL_GetFreqDomain_SYS+0xa8>)
 8002dcc:	607b      	str	r3, [r7, #4]
      break;
 8002dce:	e00a      	b.n	8002de6 <RCC_PLL_GetFreqDomain_SYS+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002dd0:	f7ff fe91 	bl	8002af6 <LL_RCC_MSI_GetRange>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8002dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de2:	607b      	str	r3, [r7, #4]
      break;
 8002de4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002de6:	f7ff fecf 	bl	8002b88 <LL_RCC_PLL_GetN>
 8002dea:	4602      	mov	r2, r0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	fb03 f402 	mul.w	r4, r3, r2
 8002df2:	f7ff fee2 	bl	8002bba <LL_RCC_PLL_GetDivider>
 8002df6:	4603      	mov	r3, r0
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	fbb4 f4f3 	udiv	r4, r4, r3
 8002e00:	f7ff fecf 	bl	8002ba2 <LL_RCC_PLL_GetR>
 8002e04:	4603      	mov	r3, r0
 8002e06:	0f5b      	lsrs	r3, r3, #29
 8002e08:	3301      	adds	r3, #1
 8002e0a:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd90      	pop	{r4, r7, pc}
 8002e16:	bf00      	nop
 8002e18:	08004220 	.word	0x08004220
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	01e84800 	.word	0x01e84800

08002e24 <LL_USART_IsEnabled>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <LL_USART_IsEnabled+0x18>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <LL_USART_IsEnabled+0x1a>
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_USART_SetPrescaler>:
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	f023 030f 	bic.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b292      	uxth	r2, r2
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <LL_USART_SetStopBitsLength>:
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	605a      	str	r2, [r3, #4]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_USART_SetHWFlowCtrl>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <LL_USART_SetBaudRate>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0b      	cmp	r3, #11
 8002ed2:	d83c      	bhi.n	8002f4e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d039      	beq.n	8002f4e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee0:	d122      	bne.n	8002f28 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <LL_USART_SetBaudRate+0x9c>)
 8002eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	005a      	lsls	r2, r3, #1
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	441a      	add	r2, r3
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	60da      	str	r2, [r3, #12]
}
 8002f26:	e012      	b.n	8002f4e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <LL_USART_SetBaudRate+0x9c>)
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	441a      	add	r2, r3
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	60da      	str	r2, [r3, #12]
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	08004260 	.word	0x08004260

08002f60 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff56 	bl	8002e24 <LL_USART_IsEnabled>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d140      	bne.n	8003000 <LL_USART_Init+0xa0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4b22      	ldr	r3, [pc, #136]	; (800300c <LL_USART_Init+0xac>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	6891      	ldr	r1, [r2, #8]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	6912      	ldr	r2, [r2, #16]
 8002f8e:	4311      	orrs	r1, r2
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	6952      	ldr	r2, [r2, #20]
 8002f94:	4311      	orrs	r1, r2
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	69d2      	ldr	r2, [r2, #28]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ff62 	bl	8002e72 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff6f 	bl	8002e98 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <LL_USART_Init+0xb0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d103      	bne.n	8002fca <LL_USART_Init+0x6a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	f7ff fe12 	bl	8002bec <LL_RCC_GetUSARTClockFreq>
 8002fc8:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d011      	beq.n	8002ff4 <LL_USART_Init+0x94>
        && (USART_InitStruct->BaudRate != 0U))
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <LL_USART_Init+0x94>
    {
      status = SUCCESS;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	69d9      	ldr	r1, [r3, #28]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	460b      	mov	r3, r1
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff66 	bl	8002ec0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ff25 	bl	8002e4a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003000:	7bfb      	ldrb	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	efff69f3 	.word	0xefff69f3
 8003010:	40013800 	.word	0x40013800

08003014 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	4a07      	ldr	r2, [pc, #28]	; (8003044 <LL_InitTick+0x30>)
 8003028:	3b01      	subs	r3, #1
 800302a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <LL_InitTick+0x30>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <LL_InitTick+0x30>)
 8003034:	2205      	movs	r2, #5
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000e010 	.word	0xe000e010

08003048 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field)
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000);
 8003050:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ffdd 	bl	8003014 <LL_InitTick>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t mDelay = Delay;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <LL_mDelay+0x4c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60bb      	str	r3, [r7, #8]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003076:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if (mDelay < LL_MAX_DELAY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307e:	d00c      	beq.n	800309a <LL_mDelay+0x36>
  {
    mDelay++;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3301      	adds	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
  }

  while (mDelay != 0U)
 8003086:	e008      	b.n	800309a <LL_mDelay+0x36>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <LL_mDelay+0x4c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <LL_mDelay+0x36>
    {
      mDelay--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3b01      	subs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
  while (mDelay != 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f3      	bne.n	8003088 <LL_mDelay+0x24>
    }
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e010 	.word	0xe000e010

080030b4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field))
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <LL_SetSystemCoreClock+0x1c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6013      	str	r3, [r2, #0]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	2000000c 	.word	0x2000000c

080030d4 <__errno>:
 80030d4:	4b01      	ldr	r3, [pc, #4]	; (80030dc <__errno+0x8>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000010 	.word	0x20000010

080030e0 <__libc_init_array>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	4d0d      	ldr	r5, [pc, #52]	; (8003118 <__libc_init_array+0x38>)
 80030e4:	4c0d      	ldr	r4, [pc, #52]	; (800311c <__libc_init_array+0x3c>)
 80030e6:	1b64      	subs	r4, r4, r5
 80030e8:	10a4      	asrs	r4, r4, #2
 80030ea:	2600      	movs	r6, #0
 80030ec:	42a6      	cmp	r6, r4
 80030ee:	d109      	bne.n	8003104 <__libc_init_array+0x24>
 80030f0:	4d0b      	ldr	r5, [pc, #44]	; (8003120 <__libc_init_array+0x40>)
 80030f2:	4c0c      	ldr	r4, [pc, #48]	; (8003124 <__libc_init_array+0x44>)
 80030f4:	f001 f858 	bl	80041a8 <_init>
 80030f8:	1b64      	subs	r4, r4, r5
 80030fa:	10a4      	asrs	r4, r4, #2
 80030fc:	2600      	movs	r6, #0
 80030fe:	42a6      	cmp	r6, r4
 8003100:	d105      	bne.n	800310e <__libc_init_array+0x2e>
 8003102:	bd70      	pop	{r4, r5, r6, pc}
 8003104:	f855 3b04 	ldr.w	r3, [r5], #4
 8003108:	4798      	blx	r3
 800310a:	3601      	adds	r6, #1
 800310c:	e7ee      	b.n	80030ec <__libc_init_array+0xc>
 800310e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003112:	4798      	blx	r3
 8003114:	3601      	adds	r6, #1
 8003116:	e7f2      	b.n	80030fe <__libc_init_array+0x1e>
 8003118:	080043d8 	.word	0x080043d8
 800311c:	080043d8 	.word	0x080043d8
 8003120:	080043d8 	.word	0x080043d8
 8003124:	080043dc 	.word	0x080043dc

08003128 <memset>:
 8003128:	4402      	add	r2, r0
 800312a:	4603      	mov	r3, r0
 800312c:	4293      	cmp	r3, r2
 800312e:	d100      	bne.n	8003132 <memset+0xa>
 8003130:	4770      	bx	lr
 8003132:	f803 1b01 	strb.w	r1, [r3], #1
 8003136:	e7f9      	b.n	800312c <memset+0x4>

08003138 <rand>:
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <rand+0x5c>)
 800313a:	b510      	push	{r4, lr}
 800313c:	681c      	ldr	r4, [r3, #0]
 800313e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003140:	b9b3      	cbnz	r3, 8003170 <rand+0x38>
 8003142:	2018      	movs	r0, #24
 8003144:	f000 f866 	bl	8003214 <malloc>
 8003148:	63a0      	str	r0, [r4, #56]	; 0x38
 800314a:	b928      	cbnz	r0, 8003158 <rand+0x20>
 800314c:	4602      	mov	r2, r0
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <rand+0x60>)
 8003150:	4812      	ldr	r0, [pc, #72]	; (800319c <rand+0x64>)
 8003152:	214e      	movs	r1, #78	; 0x4e
 8003154:	f000 f82e 	bl	80031b4 <__assert_func>
 8003158:	4a11      	ldr	r2, [pc, #68]	; (80031a0 <rand+0x68>)
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <rand+0x6c>)
 800315c:	e9c0 2300 	strd	r2, r3, [r0]
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <rand+0x70>)
 8003162:	6083      	str	r3, [r0, #8]
 8003164:	230b      	movs	r3, #11
 8003166:	8183      	strh	r3, [r0, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	2300      	movs	r3, #0
 800316c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003170:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003172:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <rand+0x74>)
 8003174:	6920      	ldr	r0, [r4, #16]
 8003176:	6963      	ldr	r3, [r4, #20]
 8003178:	490d      	ldr	r1, [pc, #52]	; (80031b0 <rand+0x78>)
 800317a:	4342      	muls	r2, r0
 800317c:	fb01 2203 	mla	r2, r1, r3, r2
 8003180:	fba0 0101 	umull	r0, r1, r0, r1
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	eb42 0001 	adc.w	r0, r2, r1
 800318a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800318e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003192:	bd10      	pop	{r4, pc}
 8003194:	20000010 	.word	0x20000010
 8003198:	08004294 	.word	0x08004294
 800319c:	080042ab 	.word	0x080042ab
 80031a0:	abcd330e 	.word	0xabcd330e
 80031a4:	e66d1234 	.word	0xe66d1234
 80031a8:	0005deec 	.word	0x0005deec
 80031ac:	5851f42d 	.word	0x5851f42d
 80031b0:	4c957f2d 	.word	0x4c957f2d

080031b4 <__assert_func>:
 80031b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80031b6:	4614      	mov	r4, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <__assert_func+0x2c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4605      	mov	r5, r0
 80031c0:	68d8      	ldr	r0, [r3, #12]
 80031c2:	b14c      	cbz	r4, 80031d8 <__assert_func+0x24>
 80031c4:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <__assert_func+0x30>)
 80031c6:	9100      	str	r1, [sp, #0]
 80031c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80031cc:	4906      	ldr	r1, [pc, #24]	; (80031e8 <__assert_func+0x34>)
 80031ce:	462b      	mov	r3, r5
 80031d0:	f000 f80e 	bl	80031f0 <fiprintf>
 80031d4:	f000 fcc4 	bl	8003b60 <abort>
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <__assert_func+0x38>)
 80031da:	461c      	mov	r4, r3
 80031dc:	e7f3      	b.n	80031c6 <__assert_func+0x12>
 80031de:	bf00      	nop
 80031e0:	20000010 	.word	0x20000010
 80031e4:	08004306 	.word	0x08004306
 80031e8:	08004313 	.word	0x08004313
 80031ec:	08004341 	.word	0x08004341

080031f0 <fiprintf>:
 80031f0:	b40e      	push	{r1, r2, r3}
 80031f2:	b503      	push	{r0, r1, lr}
 80031f4:	4601      	mov	r1, r0
 80031f6:	ab03      	add	r3, sp, #12
 80031f8:	4805      	ldr	r0, [pc, #20]	; (8003210 <fiprintf+0x20>)
 80031fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80031fe:	6800      	ldr	r0, [r0, #0]
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	f000 f919 	bl	8003438 <_vfiprintf_r>
 8003206:	b002      	add	sp, #8
 8003208:	f85d eb04 	ldr.w	lr, [sp], #4
 800320c:	b003      	add	sp, #12
 800320e:	4770      	bx	lr
 8003210:	20000010 	.word	0x20000010

08003214 <malloc>:
 8003214:	4b02      	ldr	r3, [pc, #8]	; (8003220 <malloc+0xc>)
 8003216:	4601      	mov	r1, r0
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	f000 b86f 	b.w	80032fc <_malloc_r>
 800321e:	bf00      	nop
 8003220:	20000010 	.word	0x20000010

08003224 <_free_r>:
 8003224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003226:	2900      	cmp	r1, #0
 8003228:	d044      	beq.n	80032b4 <_free_r+0x90>
 800322a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800322e:	9001      	str	r0, [sp, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f1a1 0404 	sub.w	r4, r1, #4
 8003236:	bfb8      	it	lt
 8003238:	18e4      	addlt	r4, r4, r3
 800323a:	f000 feb9 	bl	8003fb0 <__malloc_lock>
 800323e:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <_free_r+0x94>)
 8003240:	9801      	ldr	r0, [sp, #4]
 8003242:	6813      	ldr	r3, [r2, #0]
 8003244:	b933      	cbnz	r3, 8003254 <_free_r+0x30>
 8003246:	6063      	str	r3, [r4, #4]
 8003248:	6014      	str	r4, [r2, #0]
 800324a:	b003      	add	sp, #12
 800324c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003250:	f000 beb4 	b.w	8003fbc <__malloc_unlock>
 8003254:	42a3      	cmp	r3, r4
 8003256:	d908      	bls.n	800326a <_free_r+0x46>
 8003258:	6825      	ldr	r5, [r4, #0]
 800325a:	1961      	adds	r1, r4, r5
 800325c:	428b      	cmp	r3, r1
 800325e:	bf01      	itttt	eq
 8003260:	6819      	ldreq	r1, [r3, #0]
 8003262:	685b      	ldreq	r3, [r3, #4]
 8003264:	1949      	addeq	r1, r1, r5
 8003266:	6021      	streq	r1, [r4, #0]
 8003268:	e7ed      	b.n	8003246 <_free_r+0x22>
 800326a:	461a      	mov	r2, r3
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b10b      	cbz	r3, 8003274 <_free_r+0x50>
 8003270:	42a3      	cmp	r3, r4
 8003272:	d9fa      	bls.n	800326a <_free_r+0x46>
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	1855      	adds	r5, r2, r1
 8003278:	42a5      	cmp	r5, r4
 800327a:	d10b      	bne.n	8003294 <_free_r+0x70>
 800327c:	6824      	ldr	r4, [r4, #0]
 800327e:	4421      	add	r1, r4
 8003280:	1854      	adds	r4, r2, r1
 8003282:	42a3      	cmp	r3, r4
 8003284:	6011      	str	r1, [r2, #0]
 8003286:	d1e0      	bne.n	800324a <_free_r+0x26>
 8003288:	681c      	ldr	r4, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	6053      	str	r3, [r2, #4]
 800328e:	4421      	add	r1, r4
 8003290:	6011      	str	r1, [r2, #0]
 8003292:	e7da      	b.n	800324a <_free_r+0x26>
 8003294:	d902      	bls.n	800329c <_free_r+0x78>
 8003296:	230c      	movs	r3, #12
 8003298:	6003      	str	r3, [r0, #0]
 800329a:	e7d6      	b.n	800324a <_free_r+0x26>
 800329c:	6825      	ldr	r5, [r4, #0]
 800329e:	1961      	adds	r1, r4, r5
 80032a0:	428b      	cmp	r3, r1
 80032a2:	bf04      	itt	eq
 80032a4:	6819      	ldreq	r1, [r3, #0]
 80032a6:	685b      	ldreq	r3, [r3, #4]
 80032a8:	6063      	str	r3, [r4, #4]
 80032aa:	bf04      	itt	eq
 80032ac:	1949      	addeq	r1, r1, r5
 80032ae:	6021      	streq	r1, [r4, #0]
 80032b0:	6054      	str	r4, [r2, #4]
 80032b2:	e7ca      	b.n	800324a <_free_r+0x26>
 80032b4:	b003      	add	sp, #12
 80032b6:	bd30      	pop	{r4, r5, pc}
 80032b8:	20000474 	.word	0x20000474

080032bc <sbrk_aligned>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	4e0e      	ldr	r6, [pc, #56]	; (80032f8 <sbrk_aligned+0x3c>)
 80032c0:	460c      	mov	r4, r1
 80032c2:	6831      	ldr	r1, [r6, #0]
 80032c4:	4605      	mov	r5, r0
 80032c6:	b911      	cbnz	r1, 80032ce <sbrk_aligned+0x12>
 80032c8:	f000 fb7a 	bl	80039c0 <_sbrk_r>
 80032cc:	6030      	str	r0, [r6, #0]
 80032ce:	4621      	mov	r1, r4
 80032d0:	4628      	mov	r0, r5
 80032d2:	f000 fb75 	bl	80039c0 <_sbrk_r>
 80032d6:	1c43      	adds	r3, r0, #1
 80032d8:	d00a      	beq.n	80032f0 <sbrk_aligned+0x34>
 80032da:	1cc4      	adds	r4, r0, #3
 80032dc:	f024 0403 	bic.w	r4, r4, #3
 80032e0:	42a0      	cmp	r0, r4
 80032e2:	d007      	beq.n	80032f4 <sbrk_aligned+0x38>
 80032e4:	1a21      	subs	r1, r4, r0
 80032e6:	4628      	mov	r0, r5
 80032e8:	f000 fb6a 	bl	80039c0 <_sbrk_r>
 80032ec:	3001      	adds	r0, #1
 80032ee:	d101      	bne.n	80032f4 <sbrk_aligned+0x38>
 80032f0:	f04f 34ff 	mov.w	r4, #4294967295
 80032f4:	4620      	mov	r0, r4
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	20000478 	.word	0x20000478

080032fc <_malloc_r>:
 80032fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003300:	1ccd      	adds	r5, r1, #3
 8003302:	f025 0503 	bic.w	r5, r5, #3
 8003306:	3508      	adds	r5, #8
 8003308:	2d0c      	cmp	r5, #12
 800330a:	bf38      	it	cc
 800330c:	250c      	movcc	r5, #12
 800330e:	2d00      	cmp	r5, #0
 8003310:	4607      	mov	r7, r0
 8003312:	db01      	blt.n	8003318 <_malloc_r+0x1c>
 8003314:	42a9      	cmp	r1, r5
 8003316:	d905      	bls.n	8003324 <_malloc_r+0x28>
 8003318:	230c      	movs	r3, #12
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	2600      	movs	r6, #0
 800331e:	4630      	mov	r0, r6
 8003320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003324:	4e2e      	ldr	r6, [pc, #184]	; (80033e0 <_malloc_r+0xe4>)
 8003326:	f000 fe43 	bl	8003fb0 <__malloc_lock>
 800332a:	6833      	ldr	r3, [r6, #0]
 800332c:	461c      	mov	r4, r3
 800332e:	bb34      	cbnz	r4, 800337e <_malloc_r+0x82>
 8003330:	4629      	mov	r1, r5
 8003332:	4638      	mov	r0, r7
 8003334:	f7ff ffc2 	bl	80032bc <sbrk_aligned>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	4604      	mov	r4, r0
 800333c:	d14d      	bne.n	80033da <_malloc_r+0xde>
 800333e:	6834      	ldr	r4, [r6, #0]
 8003340:	4626      	mov	r6, r4
 8003342:	2e00      	cmp	r6, #0
 8003344:	d140      	bne.n	80033c8 <_malloc_r+0xcc>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	4631      	mov	r1, r6
 800334a:	4638      	mov	r0, r7
 800334c:	eb04 0803 	add.w	r8, r4, r3
 8003350:	f000 fb36 	bl	80039c0 <_sbrk_r>
 8003354:	4580      	cmp	r8, r0
 8003356:	d13a      	bne.n	80033ce <_malloc_r+0xd2>
 8003358:	6821      	ldr	r1, [r4, #0]
 800335a:	3503      	adds	r5, #3
 800335c:	1a6d      	subs	r5, r5, r1
 800335e:	f025 0503 	bic.w	r5, r5, #3
 8003362:	3508      	adds	r5, #8
 8003364:	2d0c      	cmp	r5, #12
 8003366:	bf38      	it	cc
 8003368:	250c      	movcc	r5, #12
 800336a:	4629      	mov	r1, r5
 800336c:	4638      	mov	r0, r7
 800336e:	f7ff ffa5 	bl	80032bc <sbrk_aligned>
 8003372:	3001      	adds	r0, #1
 8003374:	d02b      	beq.n	80033ce <_malloc_r+0xd2>
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	442b      	add	r3, r5
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	e00e      	b.n	800339c <_malloc_r+0xa0>
 800337e:	6822      	ldr	r2, [r4, #0]
 8003380:	1b52      	subs	r2, r2, r5
 8003382:	d41e      	bmi.n	80033c2 <_malloc_r+0xc6>
 8003384:	2a0b      	cmp	r2, #11
 8003386:	d916      	bls.n	80033b6 <_malloc_r+0xba>
 8003388:	1961      	adds	r1, r4, r5
 800338a:	42a3      	cmp	r3, r4
 800338c:	6025      	str	r5, [r4, #0]
 800338e:	bf18      	it	ne
 8003390:	6059      	strne	r1, [r3, #4]
 8003392:	6863      	ldr	r3, [r4, #4]
 8003394:	bf08      	it	eq
 8003396:	6031      	streq	r1, [r6, #0]
 8003398:	5162      	str	r2, [r4, r5]
 800339a:	604b      	str	r3, [r1, #4]
 800339c:	4638      	mov	r0, r7
 800339e:	f104 060b 	add.w	r6, r4, #11
 80033a2:	f000 fe0b 	bl	8003fbc <__malloc_unlock>
 80033a6:	f026 0607 	bic.w	r6, r6, #7
 80033aa:	1d23      	adds	r3, r4, #4
 80033ac:	1af2      	subs	r2, r6, r3
 80033ae:	d0b6      	beq.n	800331e <_malloc_r+0x22>
 80033b0:	1b9b      	subs	r3, r3, r6
 80033b2:	50a3      	str	r3, [r4, r2]
 80033b4:	e7b3      	b.n	800331e <_malloc_r+0x22>
 80033b6:	6862      	ldr	r2, [r4, #4]
 80033b8:	42a3      	cmp	r3, r4
 80033ba:	bf0c      	ite	eq
 80033bc:	6032      	streq	r2, [r6, #0]
 80033be:	605a      	strne	r2, [r3, #4]
 80033c0:	e7ec      	b.n	800339c <_malloc_r+0xa0>
 80033c2:	4623      	mov	r3, r4
 80033c4:	6864      	ldr	r4, [r4, #4]
 80033c6:	e7b2      	b.n	800332e <_malloc_r+0x32>
 80033c8:	4634      	mov	r4, r6
 80033ca:	6876      	ldr	r6, [r6, #4]
 80033cc:	e7b9      	b.n	8003342 <_malloc_r+0x46>
 80033ce:	230c      	movs	r3, #12
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	4638      	mov	r0, r7
 80033d4:	f000 fdf2 	bl	8003fbc <__malloc_unlock>
 80033d8:	e7a1      	b.n	800331e <_malloc_r+0x22>
 80033da:	6025      	str	r5, [r4, #0]
 80033dc:	e7de      	b.n	800339c <_malloc_r+0xa0>
 80033de:	bf00      	nop
 80033e0:	20000474 	.word	0x20000474

080033e4 <__sfputc_r>:
 80033e4:	6893      	ldr	r3, [r2, #8]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	b410      	push	{r4}
 80033ec:	6093      	str	r3, [r2, #8]
 80033ee:	da08      	bge.n	8003402 <__sfputc_r+0x1e>
 80033f0:	6994      	ldr	r4, [r2, #24]
 80033f2:	42a3      	cmp	r3, r4
 80033f4:	db01      	blt.n	80033fa <__sfputc_r+0x16>
 80033f6:	290a      	cmp	r1, #10
 80033f8:	d103      	bne.n	8003402 <__sfputc_r+0x1e>
 80033fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033fe:	f000 baef 	b.w	80039e0 <__swbuf_r>
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	1c58      	adds	r0, r3, #1
 8003406:	6010      	str	r0, [r2, #0]
 8003408:	7019      	strb	r1, [r3, #0]
 800340a:	4608      	mov	r0, r1
 800340c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003410:	4770      	bx	lr

08003412 <__sfputs_r>:
 8003412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003414:	4606      	mov	r6, r0
 8003416:	460f      	mov	r7, r1
 8003418:	4614      	mov	r4, r2
 800341a:	18d5      	adds	r5, r2, r3
 800341c:	42ac      	cmp	r4, r5
 800341e:	d101      	bne.n	8003424 <__sfputs_r+0x12>
 8003420:	2000      	movs	r0, #0
 8003422:	e007      	b.n	8003434 <__sfputs_r+0x22>
 8003424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003428:	463a      	mov	r2, r7
 800342a:	4630      	mov	r0, r6
 800342c:	f7ff ffda 	bl	80033e4 <__sfputc_r>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d1f3      	bne.n	800341c <__sfputs_r+0xa>
 8003434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003438 <_vfiprintf_r>:
 8003438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800343c:	460d      	mov	r5, r1
 800343e:	b09d      	sub	sp, #116	; 0x74
 8003440:	4614      	mov	r4, r2
 8003442:	4698      	mov	r8, r3
 8003444:	4606      	mov	r6, r0
 8003446:	b118      	cbz	r0, 8003450 <_vfiprintf_r+0x18>
 8003448:	6983      	ldr	r3, [r0, #24]
 800344a:	b90b      	cbnz	r3, 8003450 <_vfiprintf_r+0x18>
 800344c:	f000 fcaa 	bl	8003da4 <__sinit>
 8003450:	4b89      	ldr	r3, [pc, #548]	; (8003678 <_vfiprintf_r+0x240>)
 8003452:	429d      	cmp	r5, r3
 8003454:	d11b      	bne.n	800348e <_vfiprintf_r+0x56>
 8003456:	6875      	ldr	r5, [r6, #4]
 8003458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800345a:	07d9      	lsls	r1, r3, #31
 800345c:	d405      	bmi.n	800346a <_vfiprintf_r+0x32>
 800345e:	89ab      	ldrh	r3, [r5, #12]
 8003460:	059a      	lsls	r2, r3, #22
 8003462:	d402      	bmi.n	800346a <_vfiprintf_r+0x32>
 8003464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003466:	f000 fd3b 	bl	8003ee0 <__retarget_lock_acquire_recursive>
 800346a:	89ab      	ldrh	r3, [r5, #12]
 800346c:	071b      	lsls	r3, r3, #28
 800346e:	d501      	bpl.n	8003474 <_vfiprintf_r+0x3c>
 8003470:	692b      	ldr	r3, [r5, #16]
 8003472:	b9eb      	cbnz	r3, 80034b0 <_vfiprintf_r+0x78>
 8003474:	4629      	mov	r1, r5
 8003476:	4630      	mov	r0, r6
 8003478:	f000 fb04 	bl	8003a84 <__swsetup_r>
 800347c:	b1c0      	cbz	r0, 80034b0 <_vfiprintf_r+0x78>
 800347e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003480:	07dc      	lsls	r4, r3, #31
 8003482:	d50e      	bpl.n	80034a2 <_vfiprintf_r+0x6a>
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	b01d      	add	sp, #116	; 0x74
 800348a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800348e:	4b7b      	ldr	r3, [pc, #492]	; (800367c <_vfiprintf_r+0x244>)
 8003490:	429d      	cmp	r5, r3
 8003492:	d101      	bne.n	8003498 <_vfiprintf_r+0x60>
 8003494:	68b5      	ldr	r5, [r6, #8]
 8003496:	e7df      	b.n	8003458 <_vfiprintf_r+0x20>
 8003498:	4b79      	ldr	r3, [pc, #484]	; (8003680 <_vfiprintf_r+0x248>)
 800349a:	429d      	cmp	r5, r3
 800349c:	bf08      	it	eq
 800349e:	68f5      	ldreq	r5, [r6, #12]
 80034a0:	e7da      	b.n	8003458 <_vfiprintf_r+0x20>
 80034a2:	89ab      	ldrh	r3, [r5, #12]
 80034a4:	0598      	lsls	r0, r3, #22
 80034a6:	d4ed      	bmi.n	8003484 <_vfiprintf_r+0x4c>
 80034a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034aa:	f000 fd1a 	bl	8003ee2 <__retarget_lock_release_recursive>
 80034ae:	e7e9      	b.n	8003484 <_vfiprintf_r+0x4c>
 80034b0:	2300      	movs	r3, #0
 80034b2:	9309      	str	r3, [sp, #36]	; 0x24
 80034b4:	2320      	movs	r3, #32
 80034b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80034be:	2330      	movs	r3, #48	; 0x30
 80034c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003684 <_vfiprintf_r+0x24c>
 80034c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034c8:	f04f 0901 	mov.w	r9, #1
 80034cc:	4623      	mov	r3, r4
 80034ce:	469a      	mov	sl, r3
 80034d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034d4:	b10a      	cbz	r2, 80034da <_vfiprintf_r+0xa2>
 80034d6:	2a25      	cmp	r2, #37	; 0x25
 80034d8:	d1f9      	bne.n	80034ce <_vfiprintf_r+0x96>
 80034da:	ebba 0b04 	subs.w	fp, sl, r4
 80034de:	d00b      	beq.n	80034f8 <_vfiprintf_r+0xc0>
 80034e0:	465b      	mov	r3, fp
 80034e2:	4622      	mov	r2, r4
 80034e4:	4629      	mov	r1, r5
 80034e6:	4630      	mov	r0, r6
 80034e8:	f7ff ff93 	bl	8003412 <__sfputs_r>
 80034ec:	3001      	adds	r0, #1
 80034ee:	f000 80aa 	beq.w	8003646 <_vfiprintf_r+0x20e>
 80034f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034f4:	445a      	add	r2, fp
 80034f6:	9209      	str	r2, [sp, #36]	; 0x24
 80034f8:	f89a 3000 	ldrb.w	r3, [sl]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80a2 	beq.w	8003646 <_vfiprintf_r+0x20e>
 8003502:	2300      	movs	r3, #0
 8003504:	f04f 32ff 	mov.w	r2, #4294967295
 8003508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800350c:	f10a 0a01 	add.w	sl, sl, #1
 8003510:	9304      	str	r3, [sp, #16]
 8003512:	9307      	str	r3, [sp, #28]
 8003514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003518:	931a      	str	r3, [sp, #104]	; 0x68
 800351a:	4654      	mov	r4, sl
 800351c:	2205      	movs	r2, #5
 800351e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003522:	4858      	ldr	r0, [pc, #352]	; (8003684 <_vfiprintf_r+0x24c>)
 8003524:	f7fc fe2c 	bl	8000180 <memchr>
 8003528:	9a04      	ldr	r2, [sp, #16]
 800352a:	b9d8      	cbnz	r0, 8003564 <_vfiprintf_r+0x12c>
 800352c:	06d1      	lsls	r1, r2, #27
 800352e:	bf44      	itt	mi
 8003530:	2320      	movmi	r3, #32
 8003532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003536:	0713      	lsls	r3, r2, #28
 8003538:	bf44      	itt	mi
 800353a:	232b      	movmi	r3, #43	; 0x2b
 800353c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003540:	f89a 3000 	ldrb.w	r3, [sl]
 8003544:	2b2a      	cmp	r3, #42	; 0x2a
 8003546:	d015      	beq.n	8003574 <_vfiprintf_r+0x13c>
 8003548:	9a07      	ldr	r2, [sp, #28]
 800354a:	4654      	mov	r4, sl
 800354c:	2000      	movs	r0, #0
 800354e:	f04f 0c0a 	mov.w	ip, #10
 8003552:	4621      	mov	r1, r4
 8003554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003558:	3b30      	subs	r3, #48	; 0x30
 800355a:	2b09      	cmp	r3, #9
 800355c:	d94e      	bls.n	80035fc <_vfiprintf_r+0x1c4>
 800355e:	b1b0      	cbz	r0, 800358e <_vfiprintf_r+0x156>
 8003560:	9207      	str	r2, [sp, #28]
 8003562:	e014      	b.n	800358e <_vfiprintf_r+0x156>
 8003564:	eba0 0308 	sub.w	r3, r0, r8
 8003568:	fa09 f303 	lsl.w	r3, r9, r3
 800356c:	4313      	orrs	r3, r2
 800356e:	9304      	str	r3, [sp, #16]
 8003570:	46a2      	mov	sl, r4
 8003572:	e7d2      	b.n	800351a <_vfiprintf_r+0xe2>
 8003574:	9b03      	ldr	r3, [sp, #12]
 8003576:	1d19      	adds	r1, r3, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	9103      	str	r1, [sp, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	bfbb      	ittet	lt
 8003580:	425b      	neglt	r3, r3
 8003582:	f042 0202 	orrlt.w	r2, r2, #2
 8003586:	9307      	strge	r3, [sp, #28]
 8003588:	9307      	strlt	r3, [sp, #28]
 800358a:	bfb8      	it	lt
 800358c:	9204      	strlt	r2, [sp, #16]
 800358e:	7823      	ldrb	r3, [r4, #0]
 8003590:	2b2e      	cmp	r3, #46	; 0x2e
 8003592:	d10c      	bne.n	80035ae <_vfiprintf_r+0x176>
 8003594:	7863      	ldrb	r3, [r4, #1]
 8003596:	2b2a      	cmp	r3, #42	; 0x2a
 8003598:	d135      	bne.n	8003606 <_vfiprintf_r+0x1ce>
 800359a:	9b03      	ldr	r3, [sp, #12]
 800359c:	1d1a      	adds	r2, r3, #4
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	9203      	str	r2, [sp, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bfb8      	it	lt
 80035a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80035aa:	3402      	adds	r4, #2
 80035ac:	9305      	str	r3, [sp, #20]
 80035ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003694 <_vfiprintf_r+0x25c>
 80035b2:	7821      	ldrb	r1, [r4, #0]
 80035b4:	2203      	movs	r2, #3
 80035b6:	4650      	mov	r0, sl
 80035b8:	f7fc fde2 	bl	8000180 <memchr>
 80035bc:	b140      	cbz	r0, 80035d0 <_vfiprintf_r+0x198>
 80035be:	2340      	movs	r3, #64	; 0x40
 80035c0:	eba0 000a 	sub.w	r0, r0, sl
 80035c4:	fa03 f000 	lsl.w	r0, r3, r0
 80035c8:	9b04      	ldr	r3, [sp, #16]
 80035ca:	4303      	orrs	r3, r0
 80035cc:	3401      	adds	r4, #1
 80035ce:	9304      	str	r3, [sp, #16]
 80035d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d4:	482c      	ldr	r0, [pc, #176]	; (8003688 <_vfiprintf_r+0x250>)
 80035d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035da:	2206      	movs	r2, #6
 80035dc:	f7fc fdd0 	bl	8000180 <memchr>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d03f      	beq.n	8003664 <_vfiprintf_r+0x22c>
 80035e4:	4b29      	ldr	r3, [pc, #164]	; (800368c <_vfiprintf_r+0x254>)
 80035e6:	bb1b      	cbnz	r3, 8003630 <_vfiprintf_r+0x1f8>
 80035e8:	9b03      	ldr	r3, [sp, #12]
 80035ea:	3307      	adds	r3, #7
 80035ec:	f023 0307 	bic.w	r3, r3, #7
 80035f0:	3308      	adds	r3, #8
 80035f2:	9303      	str	r3, [sp, #12]
 80035f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f6:	443b      	add	r3, r7
 80035f8:	9309      	str	r3, [sp, #36]	; 0x24
 80035fa:	e767      	b.n	80034cc <_vfiprintf_r+0x94>
 80035fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003600:	460c      	mov	r4, r1
 8003602:	2001      	movs	r0, #1
 8003604:	e7a5      	b.n	8003552 <_vfiprintf_r+0x11a>
 8003606:	2300      	movs	r3, #0
 8003608:	3401      	adds	r4, #1
 800360a:	9305      	str	r3, [sp, #20]
 800360c:	4619      	mov	r1, r3
 800360e:	f04f 0c0a 	mov.w	ip, #10
 8003612:	4620      	mov	r0, r4
 8003614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003618:	3a30      	subs	r2, #48	; 0x30
 800361a:	2a09      	cmp	r2, #9
 800361c:	d903      	bls.n	8003626 <_vfiprintf_r+0x1ee>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0c5      	beq.n	80035ae <_vfiprintf_r+0x176>
 8003622:	9105      	str	r1, [sp, #20]
 8003624:	e7c3      	b.n	80035ae <_vfiprintf_r+0x176>
 8003626:	fb0c 2101 	mla	r1, ip, r1, r2
 800362a:	4604      	mov	r4, r0
 800362c:	2301      	movs	r3, #1
 800362e:	e7f0      	b.n	8003612 <_vfiprintf_r+0x1da>
 8003630:	ab03      	add	r3, sp, #12
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	462a      	mov	r2, r5
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <_vfiprintf_r+0x258>)
 8003638:	a904      	add	r1, sp, #16
 800363a:	4630      	mov	r0, r6
 800363c:	f3af 8000 	nop.w
 8003640:	4607      	mov	r7, r0
 8003642:	1c78      	adds	r0, r7, #1
 8003644:	d1d6      	bne.n	80035f4 <_vfiprintf_r+0x1bc>
 8003646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003648:	07d9      	lsls	r1, r3, #31
 800364a:	d405      	bmi.n	8003658 <_vfiprintf_r+0x220>
 800364c:	89ab      	ldrh	r3, [r5, #12]
 800364e:	059a      	lsls	r2, r3, #22
 8003650:	d402      	bmi.n	8003658 <_vfiprintf_r+0x220>
 8003652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003654:	f000 fc45 	bl	8003ee2 <__retarget_lock_release_recursive>
 8003658:	89ab      	ldrh	r3, [r5, #12]
 800365a:	065b      	lsls	r3, r3, #25
 800365c:	f53f af12 	bmi.w	8003484 <_vfiprintf_r+0x4c>
 8003660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003662:	e711      	b.n	8003488 <_vfiprintf_r+0x50>
 8003664:	ab03      	add	r3, sp, #12
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	462a      	mov	r2, r5
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <_vfiprintf_r+0x258>)
 800366c:	a904      	add	r1, sp, #16
 800366e:	4630      	mov	r0, r6
 8003670:	f000 f880 	bl	8003774 <_printf_i>
 8003674:	e7e4      	b.n	8003640 <_vfiprintf_r+0x208>
 8003676:	bf00      	nop
 8003678:	08004398 	.word	0x08004398
 800367c:	080043b8 	.word	0x080043b8
 8003680:	08004378 	.word	0x08004378
 8003684:	08004342 	.word	0x08004342
 8003688:	0800434c 	.word	0x0800434c
 800368c:	00000000 	.word	0x00000000
 8003690:	08003413 	.word	0x08003413
 8003694:	08004348 	.word	0x08004348

08003698 <_printf_common>:
 8003698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800369c:	4616      	mov	r6, r2
 800369e:	4699      	mov	r9, r3
 80036a0:	688a      	ldr	r2, [r1, #8]
 80036a2:	690b      	ldr	r3, [r1, #16]
 80036a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bfb8      	it	lt
 80036ac:	4613      	movlt	r3, r2
 80036ae:	6033      	str	r3, [r6, #0]
 80036b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036b4:	4607      	mov	r7, r0
 80036b6:	460c      	mov	r4, r1
 80036b8:	b10a      	cbz	r2, 80036be <_printf_common+0x26>
 80036ba:	3301      	adds	r3, #1
 80036bc:	6033      	str	r3, [r6, #0]
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	0699      	lsls	r1, r3, #26
 80036c2:	bf42      	ittt	mi
 80036c4:	6833      	ldrmi	r3, [r6, #0]
 80036c6:	3302      	addmi	r3, #2
 80036c8:	6033      	strmi	r3, [r6, #0]
 80036ca:	6825      	ldr	r5, [r4, #0]
 80036cc:	f015 0506 	ands.w	r5, r5, #6
 80036d0:	d106      	bne.n	80036e0 <_printf_common+0x48>
 80036d2:	f104 0a19 	add.w	sl, r4, #25
 80036d6:	68e3      	ldr	r3, [r4, #12]
 80036d8:	6832      	ldr	r2, [r6, #0]
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	42ab      	cmp	r3, r5
 80036de:	dc26      	bgt.n	800372e <_printf_common+0x96>
 80036e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036e4:	1e13      	subs	r3, r2, #0
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	bf18      	it	ne
 80036ea:	2301      	movne	r3, #1
 80036ec:	0692      	lsls	r2, r2, #26
 80036ee:	d42b      	bmi.n	8003748 <_printf_common+0xb0>
 80036f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036f4:	4649      	mov	r1, r9
 80036f6:	4638      	mov	r0, r7
 80036f8:	47c0      	blx	r8
 80036fa:	3001      	adds	r0, #1
 80036fc:	d01e      	beq.n	800373c <_printf_common+0xa4>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	68e5      	ldr	r5, [r4, #12]
 8003702:	6832      	ldr	r2, [r6, #0]
 8003704:	f003 0306 	and.w	r3, r3, #6
 8003708:	2b04      	cmp	r3, #4
 800370a:	bf08      	it	eq
 800370c:	1aad      	subeq	r5, r5, r2
 800370e:	68a3      	ldr	r3, [r4, #8]
 8003710:	6922      	ldr	r2, [r4, #16]
 8003712:	bf0c      	ite	eq
 8003714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003718:	2500      	movne	r5, #0
 800371a:	4293      	cmp	r3, r2
 800371c:	bfc4      	itt	gt
 800371e:	1a9b      	subgt	r3, r3, r2
 8003720:	18ed      	addgt	r5, r5, r3
 8003722:	2600      	movs	r6, #0
 8003724:	341a      	adds	r4, #26
 8003726:	42b5      	cmp	r5, r6
 8003728:	d11a      	bne.n	8003760 <_printf_common+0xc8>
 800372a:	2000      	movs	r0, #0
 800372c:	e008      	b.n	8003740 <_printf_common+0xa8>
 800372e:	2301      	movs	r3, #1
 8003730:	4652      	mov	r2, sl
 8003732:	4649      	mov	r1, r9
 8003734:	4638      	mov	r0, r7
 8003736:	47c0      	blx	r8
 8003738:	3001      	adds	r0, #1
 800373a:	d103      	bne.n	8003744 <_printf_common+0xac>
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003744:	3501      	adds	r5, #1
 8003746:	e7c6      	b.n	80036d6 <_printf_common+0x3e>
 8003748:	18e1      	adds	r1, r4, r3
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	2030      	movs	r0, #48	; 0x30
 800374e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003752:	4422      	add	r2, r4
 8003754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800375c:	3302      	adds	r3, #2
 800375e:	e7c7      	b.n	80036f0 <_printf_common+0x58>
 8003760:	2301      	movs	r3, #1
 8003762:	4622      	mov	r2, r4
 8003764:	4649      	mov	r1, r9
 8003766:	4638      	mov	r0, r7
 8003768:	47c0      	blx	r8
 800376a:	3001      	adds	r0, #1
 800376c:	d0e6      	beq.n	800373c <_printf_common+0xa4>
 800376e:	3601      	adds	r6, #1
 8003770:	e7d9      	b.n	8003726 <_printf_common+0x8e>
	...

08003774 <_printf_i>:
 8003774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003778:	7e0f      	ldrb	r7, [r1, #24]
 800377a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800377c:	2f78      	cmp	r7, #120	; 0x78
 800377e:	4691      	mov	r9, r2
 8003780:	4680      	mov	r8, r0
 8003782:	460c      	mov	r4, r1
 8003784:	469a      	mov	sl, r3
 8003786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800378a:	d807      	bhi.n	800379c <_printf_i+0x28>
 800378c:	2f62      	cmp	r7, #98	; 0x62
 800378e:	d80a      	bhi.n	80037a6 <_printf_i+0x32>
 8003790:	2f00      	cmp	r7, #0
 8003792:	f000 80d8 	beq.w	8003946 <_printf_i+0x1d2>
 8003796:	2f58      	cmp	r7, #88	; 0x58
 8003798:	f000 80a3 	beq.w	80038e2 <_printf_i+0x16e>
 800379c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037a4:	e03a      	b.n	800381c <_printf_i+0xa8>
 80037a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037aa:	2b15      	cmp	r3, #21
 80037ac:	d8f6      	bhi.n	800379c <_printf_i+0x28>
 80037ae:	a101      	add	r1, pc, #4	; (adr r1, 80037b4 <_printf_i+0x40>)
 80037b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037b4:	0800380d 	.word	0x0800380d
 80037b8:	08003821 	.word	0x08003821
 80037bc:	0800379d 	.word	0x0800379d
 80037c0:	0800379d 	.word	0x0800379d
 80037c4:	0800379d 	.word	0x0800379d
 80037c8:	0800379d 	.word	0x0800379d
 80037cc:	08003821 	.word	0x08003821
 80037d0:	0800379d 	.word	0x0800379d
 80037d4:	0800379d 	.word	0x0800379d
 80037d8:	0800379d 	.word	0x0800379d
 80037dc:	0800379d 	.word	0x0800379d
 80037e0:	0800392d 	.word	0x0800392d
 80037e4:	08003851 	.word	0x08003851
 80037e8:	0800390f 	.word	0x0800390f
 80037ec:	0800379d 	.word	0x0800379d
 80037f0:	0800379d 	.word	0x0800379d
 80037f4:	0800394f 	.word	0x0800394f
 80037f8:	0800379d 	.word	0x0800379d
 80037fc:	08003851 	.word	0x08003851
 8003800:	0800379d 	.word	0x0800379d
 8003804:	0800379d 	.word	0x0800379d
 8003808:	08003917 	.word	0x08003917
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	1d1a      	adds	r2, r3, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	602a      	str	r2, [r5, #0]
 8003814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800381c:	2301      	movs	r3, #1
 800381e:	e0a3      	b.n	8003968 <_printf_i+0x1f4>
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	6829      	ldr	r1, [r5, #0]
 8003824:	0606      	lsls	r6, r0, #24
 8003826:	f101 0304 	add.w	r3, r1, #4
 800382a:	d50a      	bpl.n	8003842 <_printf_i+0xce>
 800382c:	680e      	ldr	r6, [r1, #0]
 800382e:	602b      	str	r3, [r5, #0]
 8003830:	2e00      	cmp	r6, #0
 8003832:	da03      	bge.n	800383c <_printf_i+0xc8>
 8003834:	232d      	movs	r3, #45	; 0x2d
 8003836:	4276      	negs	r6, r6
 8003838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800383c:	485e      	ldr	r0, [pc, #376]	; (80039b8 <_printf_i+0x244>)
 800383e:	230a      	movs	r3, #10
 8003840:	e019      	b.n	8003876 <_printf_i+0x102>
 8003842:	680e      	ldr	r6, [r1, #0]
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	f010 0f40 	tst.w	r0, #64	; 0x40
 800384a:	bf18      	it	ne
 800384c:	b236      	sxthne	r6, r6
 800384e:	e7ef      	b.n	8003830 <_printf_i+0xbc>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	1d19      	adds	r1, r3, #4
 8003856:	6029      	str	r1, [r5, #0]
 8003858:	0601      	lsls	r1, r0, #24
 800385a:	d501      	bpl.n	8003860 <_printf_i+0xec>
 800385c:	681e      	ldr	r6, [r3, #0]
 800385e:	e002      	b.n	8003866 <_printf_i+0xf2>
 8003860:	0646      	lsls	r6, r0, #25
 8003862:	d5fb      	bpl.n	800385c <_printf_i+0xe8>
 8003864:	881e      	ldrh	r6, [r3, #0]
 8003866:	4854      	ldr	r0, [pc, #336]	; (80039b8 <_printf_i+0x244>)
 8003868:	2f6f      	cmp	r7, #111	; 0x6f
 800386a:	bf0c      	ite	eq
 800386c:	2308      	moveq	r3, #8
 800386e:	230a      	movne	r3, #10
 8003870:	2100      	movs	r1, #0
 8003872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003876:	6865      	ldr	r5, [r4, #4]
 8003878:	60a5      	str	r5, [r4, #8]
 800387a:	2d00      	cmp	r5, #0
 800387c:	bfa2      	ittt	ge
 800387e:	6821      	ldrge	r1, [r4, #0]
 8003880:	f021 0104 	bicge.w	r1, r1, #4
 8003884:	6021      	strge	r1, [r4, #0]
 8003886:	b90e      	cbnz	r6, 800388c <_printf_i+0x118>
 8003888:	2d00      	cmp	r5, #0
 800388a:	d04d      	beq.n	8003928 <_printf_i+0x1b4>
 800388c:	4615      	mov	r5, r2
 800388e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003892:	fb03 6711 	mls	r7, r3, r1, r6
 8003896:	5dc7      	ldrb	r7, [r0, r7]
 8003898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800389c:	4637      	mov	r7, r6
 800389e:	42bb      	cmp	r3, r7
 80038a0:	460e      	mov	r6, r1
 80038a2:	d9f4      	bls.n	800388e <_printf_i+0x11a>
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d10b      	bne.n	80038c0 <_printf_i+0x14c>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	07de      	lsls	r6, r3, #31
 80038ac:	d508      	bpl.n	80038c0 <_printf_i+0x14c>
 80038ae:	6923      	ldr	r3, [r4, #16]
 80038b0:	6861      	ldr	r1, [r4, #4]
 80038b2:	4299      	cmp	r1, r3
 80038b4:	bfde      	ittt	le
 80038b6:	2330      	movle	r3, #48	; 0x30
 80038b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038c0:	1b52      	subs	r2, r2, r5
 80038c2:	6122      	str	r2, [r4, #16]
 80038c4:	f8cd a000 	str.w	sl, [sp]
 80038c8:	464b      	mov	r3, r9
 80038ca:	aa03      	add	r2, sp, #12
 80038cc:	4621      	mov	r1, r4
 80038ce:	4640      	mov	r0, r8
 80038d0:	f7ff fee2 	bl	8003698 <_printf_common>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d14c      	bne.n	8003972 <_printf_i+0x1fe>
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	b004      	add	sp, #16
 80038de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e2:	4835      	ldr	r0, [pc, #212]	; (80039b8 <_printf_i+0x244>)
 80038e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038e8:	6829      	ldr	r1, [r5, #0]
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80038f0:	6029      	str	r1, [r5, #0]
 80038f2:	061d      	lsls	r5, r3, #24
 80038f4:	d514      	bpl.n	8003920 <_printf_i+0x1ac>
 80038f6:	07df      	lsls	r7, r3, #31
 80038f8:	bf44      	itt	mi
 80038fa:	f043 0320 	orrmi.w	r3, r3, #32
 80038fe:	6023      	strmi	r3, [r4, #0]
 8003900:	b91e      	cbnz	r6, 800390a <_printf_i+0x196>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	f023 0320 	bic.w	r3, r3, #32
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	2310      	movs	r3, #16
 800390c:	e7b0      	b.n	8003870 <_printf_i+0xfc>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	f043 0320 	orr.w	r3, r3, #32
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	2378      	movs	r3, #120	; 0x78
 8003918:	4828      	ldr	r0, [pc, #160]	; (80039bc <_printf_i+0x248>)
 800391a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800391e:	e7e3      	b.n	80038e8 <_printf_i+0x174>
 8003920:	0659      	lsls	r1, r3, #25
 8003922:	bf48      	it	mi
 8003924:	b2b6      	uxthmi	r6, r6
 8003926:	e7e6      	b.n	80038f6 <_printf_i+0x182>
 8003928:	4615      	mov	r5, r2
 800392a:	e7bb      	b.n	80038a4 <_printf_i+0x130>
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	6826      	ldr	r6, [r4, #0]
 8003930:	6961      	ldr	r1, [r4, #20]
 8003932:	1d18      	adds	r0, r3, #4
 8003934:	6028      	str	r0, [r5, #0]
 8003936:	0635      	lsls	r5, r6, #24
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	d501      	bpl.n	8003940 <_printf_i+0x1cc>
 800393c:	6019      	str	r1, [r3, #0]
 800393e:	e002      	b.n	8003946 <_printf_i+0x1d2>
 8003940:	0670      	lsls	r0, r6, #25
 8003942:	d5fb      	bpl.n	800393c <_printf_i+0x1c8>
 8003944:	8019      	strh	r1, [r3, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	6123      	str	r3, [r4, #16]
 800394a:	4615      	mov	r5, r2
 800394c:	e7ba      	b.n	80038c4 <_printf_i+0x150>
 800394e:	682b      	ldr	r3, [r5, #0]
 8003950:	1d1a      	adds	r2, r3, #4
 8003952:	602a      	str	r2, [r5, #0]
 8003954:	681d      	ldr	r5, [r3, #0]
 8003956:	6862      	ldr	r2, [r4, #4]
 8003958:	2100      	movs	r1, #0
 800395a:	4628      	mov	r0, r5
 800395c:	f7fc fc10 	bl	8000180 <memchr>
 8003960:	b108      	cbz	r0, 8003966 <_printf_i+0x1f2>
 8003962:	1b40      	subs	r0, r0, r5
 8003964:	6060      	str	r0, [r4, #4]
 8003966:	6863      	ldr	r3, [r4, #4]
 8003968:	6123      	str	r3, [r4, #16]
 800396a:	2300      	movs	r3, #0
 800396c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003970:	e7a8      	b.n	80038c4 <_printf_i+0x150>
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	462a      	mov	r2, r5
 8003976:	4649      	mov	r1, r9
 8003978:	4640      	mov	r0, r8
 800397a:	47d0      	blx	sl
 800397c:	3001      	adds	r0, #1
 800397e:	d0ab      	beq.n	80038d8 <_printf_i+0x164>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	079b      	lsls	r3, r3, #30
 8003984:	d413      	bmi.n	80039ae <_printf_i+0x23a>
 8003986:	68e0      	ldr	r0, [r4, #12]
 8003988:	9b03      	ldr	r3, [sp, #12]
 800398a:	4298      	cmp	r0, r3
 800398c:	bfb8      	it	lt
 800398e:	4618      	movlt	r0, r3
 8003990:	e7a4      	b.n	80038dc <_printf_i+0x168>
 8003992:	2301      	movs	r3, #1
 8003994:	4632      	mov	r2, r6
 8003996:	4649      	mov	r1, r9
 8003998:	4640      	mov	r0, r8
 800399a:	47d0      	blx	sl
 800399c:	3001      	adds	r0, #1
 800399e:	d09b      	beq.n	80038d8 <_printf_i+0x164>
 80039a0:	3501      	adds	r5, #1
 80039a2:	68e3      	ldr	r3, [r4, #12]
 80039a4:	9903      	ldr	r1, [sp, #12]
 80039a6:	1a5b      	subs	r3, r3, r1
 80039a8:	42ab      	cmp	r3, r5
 80039aa:	dcf2      	bgt.n	8003992 <_printf_i+0x21e>
 80039ac:	e7eb      	b.n	8003986 <_printf_i+0x212>
 80039ae:	2500      	movs	r5, #0
 80039b0:	f104 0619 	add.w	r6, r4, #25
 80039b4:	e7f5      	b.n	80039a2 <_printf_i+0x22e>
 80039b6:	bf00      	nop
 80039b8:	08004353 	.word	0x08004353
 80039bc:	08004364 	.word	0x08004364

080039c0 <_sbrk_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4d06      	ldr	r5, [pc, #24]	; (80039dc <_sbrk_r+0x1c>)
 80039c4:	2300      	movs	r3, #0
 80039c6:	4604      	mov	r4, r0
 80039c8:	4608      	mov	r0, r1
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	f7fd f9d8 	bl	8000d80 <_sbrk>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_sbrk_r+0x1a>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_sbrk_r+0x1a>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	20000480 	.word	0x20000480

080039e0 <__swbuf_r>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	460e      	mov	r6, r1
 80039e4:	4614      	mov	r4, r2
 80039e6:	4605      	mov	r5, r0
 80039e8:	b118      	cbz	r0, 80039f2 <__swbuf_r+0x12>
 80039ea:	6983      	ldr	r3, [r0, #24]
 80039ec:	b90b      	cbnz	r3, 80039f2 <__swbuf_r+0x12>
 80039ee:	f000 f9d9 	bl	8003da4 <__sinit>
 80039f2:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <__swbuf_r+0x98>)
 80039f4:	429c      	cmp	r4, r3
 80039f6:	d12b      	bne.n	8003a50 <__swbuf_r+0x70>
 80039f8:	686c      	ldr	r4, [r5, #4]
 80039fa:	69a3      	ldr	r3, [r4, #24]
 80039fc:	60a3      	str	r3, [r4, #8]
 80039fe:	89a3      	ldrh	r3, [r4, #12]
 8003a00:	071a      	lsls	r2, r3, #28
 8003a02:	d52f      	bpl.n	8003a64 <__swbuf_r+0x84>
 8003a04:	6923      	ldr	r3, [r4, #16]
 8003a06:	b36b      	cbz	r3, 8003a64 <__swbuf_r+0x84>
 8003a08:	6923      	ldr	r3, [r4, #16]
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	1ac0      	subs	r0, r0, r3
 8003a0e:	6963      	ldr	r3, [r4, #20]
 8003a10:	b2f6      	uxtb	r6, r6
 8003a12:	4283      	cmp	r3, r0
 8003a14:	4637      	mov	r7, r6
 8003a16:	dc04      	bgt.n	8003a22 <__swbuf_r+0x42>
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f000 f92e 	bl	8003c7c <_fflush_r>
 8003a20:	bb30      	cbnz	r0, 8003a70 <__swbuf_r+0x90>
 8003a22:	68a3      	ldr	r3, [r4, #8]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60a3      	str	r3, [r4, #8]
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	6022      	str	r2, [r4, #0]
 8003a2e:	701e      	strb	r6, [r3, #0]
 8003a30:	6963      	ldr	r3, [r4, #20]
 8003a32:	3001      	adds	r0, #1
 8003a34:	4283      	cmp	r3, r0
 8003a36:	d004      	beq.n	8003a42 <__swbuf_r+0x62>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	07db      	lsls	r3, r3, #31
 8003a3c:	d506      	bpl.n	8003a4c <__swbuf_r+0x6c>
 8003a3e:	2e0a      	cmp	r6, #10
 8003a40:	d104      	bne.n	8003a4c <__swbuf_r+0x6c>
 8003a42:	4621      	mov	r1, r4
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 f919 	bl	8003c7c <_fflush_r>
 8003a4a:	b988      	cbnz	r0, 8003a70 <__swbuf_r+0x90>
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <__swbuf_r+0x9c>)
 8003a52:	429c      	cmp	r4, r3
 8003a54:	d101      	bne.n	8003a5a <__swbuf_r+0x7a>
 8003a56:	68ac      	ldr	r4, [r5, #8]
 8003a58:	e7cf      	b.n	80039fa <__swbuf_r+0x1a>
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <__swbuf_r+0xa0>)
 8003a5c:	429c      	cmp	r4, r3
 8003a5e:	bf08      	it	eq
 8003a60:	68ec      	ldreq	r4, [r5, #12]
 8003a62:	e7ca      	b.n	80039fa <__swbuf_r+0x1a>
 8003a64:	4621      	mov	r1, r4
 8003a66:	4628      	mov	r0, r5
 8003a68:	f000 f80c 	bl	8003a84 <__swsetup_r>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d0cb      	beq.n	8003a08 <__swbuf_r+0x28>
 8003a70:	f04f 37ff 	mov.w	r7, #4294967295
 8003a74:	e7ea      	b.n	8003a4c <__swbuf_r+0x6c>
 8003a76:	bf00      	nop
 8003a78:	08004398 	.word	0x08004398
 8003a7c:	080043b8 	.word	0x080043b8
 8003a80:	08004378 	.word	0x08004378

08003a84 <__swsetup_r>:
 8003a84:	4b32      	ldr	r3, [pc, #200]	; (8003b50 <__swsetup_r+0xcc>)
 8003a86:	b570      	push	{r4, r5, r6, lr}
 8003a88:	681d      	ldr	r5, [r3, #0]
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	b125      	cbz	r5, 8003a9a <__swsetup_r+0x16>
 8003a90:	69ab      	ldr	r3, [r5, #24]
 8003a92:	b913      	cbnz	r3, 8003a9a <__swsetup_r+0x16>
 8003a94:	4628      	mov	r0, r5
 8003a96:	f000 f985 	bl	8003da4 <__sinit>
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <__swsetup_r+0xd0>)
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	d10f      	bne.n	8003ac0 <__swsetup_r+0x3c>
 8003aa0:	686c      	ldr	r4, [r5, #4]
 8003aa2:	89a3      	ldrh	r3, [r4, #12]
 8003aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003aa8:	0719      	lsls	r1, r3, #28
 8003aaa:	d42c      	bmi.n	8003b06 <__swsetup_r+0x82>
 8003aac:	06dd      	lsls	r5, r3, #27
 8003aae:	d411      	bmi.n	8003ad4 <__swsetup_r+0x50>
 8003ab0:	2309      	movs	r3, #9
 8003ab2:	6033      	str	r3, [r6, #0]
 8003ab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ab8:	81a3      	strh	r3, [r4, #12]
 8003aba:	f04f 30ff 	mov.w	r0, #4294967295
 8003abe:	e03e      	b.n	8003b3e <__swsetup_r+0xba>
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <__swsetup_r+0xd4>)
 8003ac2:	429c      	cmp	r4, r3
 8003ac4:	d101      	bne.n	8003aca <__swsetup_r+0x46>
 8003ac6:	68ac      	ldr	r4, [r5, #8]
 8003ac8:	e7eb      	b.n	8003aa2 <__swsetup_r+0x1e>
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <__swsetup_r+0xd8>)
 8003acc:	429c      	cmp	r4, r3
 8003ace:	bf08      	it	eq
 8003ad0:	68ec      	ldreq	r4, [r5, #12]
 8003ad2:	e7e6      	b.n	8003aa2 <__swsetup_r+0x1e>
 8003ad4:	0758      	lsls	r0, r3, #29
 8003ad6:	d512      	bpl.n	8003afe <__swsetup_r+0x7a>
 8003ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ada:	b141      	cbz	r1, 8003aee <__swsetup_r+0x6a>
 8003adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ae0:	4299      	cmp	r1, r3
 8003ae2:	d002      	beq.n	8003aea <__swsetup_r+0x66>
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7ff fb9d 	bl	8003224 <_free_r>
 8003aea:	2300      	movs	r3, #0
 8003aec:	6363      	str	r3, [r4, #52]	; 0x34
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003af4:	81a3      	strh	r3, [r4, #12]
 8003af6:	2300      	movs	r3, #0
 8003af8:	6063      	str	r3, [r4, #4]
 8003afa:	6923      	ldr	r3, [r4, #16]
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	f043 0308 	orr.w	r3, r3, #8
 8003b04:	81a3      	strh	r3, [r4, #12]
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	b94b      	cbnz	r3, 8003b1e <__swsetup_r+0x9a>
 8003b0a:	89a3      	ldrh	r3, [r4, #12]
 8003b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b14:	d003      	beq.n	8003b1e <__swsetup_r+0x9a>
 8003b16:	4621      	mov	r1, r4
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f000 fa09 	bl	8003f30 <__smakebuf_r>
 8003b1e:	89a0      	ldrh	r0, [r4, #12]
 8003b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b24:	f010 0301 	ands.w	r3, r0, #1
 8003b28:	d00a      	beq.n	8003b40 <__swsetup_r+0xbc>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60a3      	str	r3, [r4, #8]
 8003b2e:	6963      	ldr	r3, [r4, #20]
 8003b30:	425b      	negs	r3, r3
 8003b32:	61a3      	str	r3, [r4, #24]
 8003b34:	6923      	ldr	r3, [r4, #16]
 8003b36:	b943      	cbnz	r3, 8003b4a <__swsetup_r+0xc6>
 8003b38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b3c:	d1ba      	bne.n	8003ab4 <__swsetup_r+0x30>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	0781      	lsls	r1, r0, #30
 8003b42:	bf58      	it	pl
 8003b44:	6963      	ldrpl	r3, [r4, #20]
 8003b46:	60a3      	str	r3, [r4, #8]
 8003b48:	e7f4      	b.n	8003b34 <__swsetup_r+0xb0>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e7f7      	b.n	8003b3e <__swsetup_r+0xba>
 8003b4e:	bf00      	nop
 8003b50:	20000010 	.word	0x20000010
 8003b54:	08004398 	.word	0x08004398
 8003b58:	080043b8 	.word	0x080043b8
 8003b5c:	08004378 	.word	0x08004378

08003b60 <abort>:
 8003b60:	b508      	push	{r3, lr}
 8003b62:	2006      	movs	r0, #6
 8003b64:	f000 fa58 	bl	8004018 <raise>
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f7fd f891 	bl	8000c90 <_exit>
	...

08003b70 <__sflush_r>:
 8003b70:	898a      	ldrh	r2, [r1, #12]
 8003b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b76:	4605      	mov	r5, r0
 8003b78:	0710      	lsls	r0, r2, #28
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	d458      	bmi.n	8003c30 <__sflush_r+0xc0>
 8003b7e:	684b      	ldr	r3, [r1, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	dc05      	bgt.n	8003b90 <__sflush_r+0x20>
 8003b84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	dc02      	bgt.n	8003b90 <__sflush_r+0x20>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b92:	2e00      	cmp	r6, #0
 8003b94:	d0f9      	beq.n	8003b8a <__sflush_r+0x1a>
 8003b96:	2300      	movs	r3, #0
 8003b98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b9c:	682f      	ldr	r7, [r5, #0]
 8003b9e:	602b      	str	r3, [r5, #0]
 8003ba0:	d032      	beq.n	8003c08 <__sflush_r+0x98>
 8003ba2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ba4:	89a3      	ldrh	r3, [r4, #12]
 8003ba6:	075a      	lsls	r2, r3, #29
 8003ba8:	d505      	bpl.n	8003bb6 <__sflush_r+0x46>
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	1ac0      	subs	r0, r0, r3
 8003bae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bb0:	b10b      	cbz	r3, 8003bb6 <__sflush_r+0x46>
 8003bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bb4:	1ac0      	subs	r0, r0, r3
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bbc:	6a21      	ldr	r1, [r4, #32]
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	47b0      	blx	r6
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	d106      	bne.n	8003bd6 <__sflush_r+0x66>
 8003bc8:	6829      	ldr	r1, [r5, #0]
 8003bca:	291d      	cmp	r1, #29
 8003bcc:	d82c      	bhi.n	8003c28 <__sflush_r+0xb8>
 8003bce:	4a2a      	ldr	r2, [pc, #168]	; (8003c78 <__sflush_r+0x108>)
 8003bd0:	40ca      	lsrs	r2, r1
 8003bd2:	07d6      	lsls	r6, r2, #31
 8003bd4:	d528      	bpl.n	8003c28 <__sflush_r+0xb8>
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	6062      	str	r2, [r4, #4]
 8003bda:	04d9      	lsls	r1, r3, #19
 8003bdc:	6922      	ldr	r2, [r4, #16]
 8003bde:	6022      	str	r2, [r4, #0]
 8003be0:	d504      	bpl.n	8003bec <__sflush_r+0x7c>
 8003be2:	1c42      	adds	r2, r0, #1
 8003be4:	d101      	bne.n	8003bea <__sflush_r+0x7a>
 8003be6:	682b      	ldr	r3, [r5, #0]
 8003be8:	b903      	cbnz	r3, 8003bec <__sflush_r+0x7c>
 8003bea:	6560      	str	r0, [r4, #84]	; 0x54
 8003bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bee:	602f      	str	r7, [r5, #0]
 8003bf0:	2900      	cmp	r1, #0
 8003bf2:	d0ca      	beq.n	8003b8a <__sflush_r+0x1a>
 8003bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bf8:	4299      	cmp	r1, r3
 8003bfa:	d002      	beq.n	8003c02 <__sflush_r+0x92>
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f7ff fb11 	bl	8003224 <_free_r>
 8003c02:	2000      	movs	r0, #0
 8003c04:	6360      	str	r0, [r4, #52]	; 0x34
 8003c06:	e7c1      	b.n	8003b8c <__sflush_r+0x1c>
 8003c08:	6a21      	ldr	r1, [r4, #32]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	47b0      	blx	r6
 8003c10:	1c41      	adds	r1, r0, #1
 8003c12:	d1c7      	bne.n	8003ba4 <__sflush_r+0x34>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0c4      	beq.n	8003ba4 <__sflush_r+0x34>
 8003c1a:	2b1d      	cmp	r3, #29
 8003c1c:	d001      	beq.n	8003c22 <__sflush_r+0xb2>
 8003c1e:	2b16      	cmp	r3, #22
 8003c20:	d101      	bne.n	8003c26 <__sflush_r+0xb6>
 8003c22:	602f      	str	r7, [r5, #0]
 8003c24:	e7b1      	b.n	8003b8a <__sflush_r+0x1a>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2c:	81a3      	strh	r3, [r4, #12]
 8003c2e:	e7ad      	b.n	8003b8c <__sflush_r+0x1c>
 8003c30:	690f      	ldr	r7, [r1, #16]
 8003c32:	2f00      	cmp	r7, #0
 8003c34:	d0a9      	beq.n	8003b8a <__sflush_r+0x1a>
 8003c36:	0793      	lsls	r3, r2, #30
 8003c38:	680e      	ldr	r6, [r1, #0]
 8003c3a:	bf08      	it	eq
 8003c3c:	694b      	ldreq	r3, [r1, #20]
 8003c3e:	600f      	str	r7, [r1, #0]
 8003c40:	bf18      	it	ne
 8003c42:	2300      	movne	r3, #0
 8003c44:	eba6 0807 	sub.w	r8, r6, r7
 8003c48:	608b      	str	r3, [r1, #8]
 8003c4a:	f1b8 0f00 	cmp.w	r8, #0
 8003c4e:	dd9c      	ble.n	8003b8a <__sflush_r+0x1a>
 8003c50:	6a21      	ldr	r1, [r4, #32]
 8003c52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c54:	4643      	mov	r3, r8
 8003c56:	463a      	mov	r2, r7
 8003c58:	4628      	mov	r0, r5
 8003c5a:	47b0      	blx	r6
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	dc06      	bgt.n	8003c6e <__sflush_r+0xfe>
 8003c60:	89a3      	ldrh	r3, [r4, #12]
 8003c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c66:	81a3      	strh	r3, [r4, #12]
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	e78e      	b.n	8003b8c <__sflush_r+0x1c>
 8003c6e:	4407      	add	r7, r0
 8003c70:	eba8 0800 	sub.w	r8, r8, r0
 8003c74:	e7e9      	b.n	8003c4a <__sflush_r+0xda>
 8003c76:	bf00      	nop
 8003c78:	20400001 	.word	0x20400001

08003c7c <_fflush_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	690b      	ldr	r3, [r1, #16]
 8003c80:	4605      	mov	r5, r0
 8003c82:	460c      	mov	r4, r1
 8003c84:	b913      	cbnz	r3, 8003c8c <_fflush_r+0x10>
 8003c86:	2500      	movs	r5, #0
 8003c88:	4628      	mov	r0, r5
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
 8003c8c:	b118      	cbz	r0, 8003c96 <_fflush_r+0x1a>
 8003c8e:	6983      	ldr	r3, [r0, #24]
 8003c90:	b90b      	cbnz	r3, 8003c96 <_fflush_r+0x1a>
 8003c92:	f000 f887 	bl	8003da4 <__sinit>
 8003c96:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <_fflush_r+0x6c>)
 8003c98:	429c      	cmp	r4, r3
 8003c9a:	d11b      	bne.n	8003cd4 <_fflush_r+0x58>
 8003c9c:	686c      	ldr	r4, [r5, #4]
 8003c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ef      	beq.n	8003c86 <_fflush_r+0xa>
 8003ca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ca8:	07d0      	lsls	r0, r2, #31
 8003caa:	d404      	bmi.n	8003cb6 <_fflush_r+0x3a>
 8003cac:	0599      	lsls	r1, r3, #22
 8003cae:	d402      	bmi.n	8003cb6 <_fflush_r+0x3a>
 8003cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cb2:	f000 f915 	bl	8003ee0 <__retarget_lock_acquire_recursive>
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	4621      	mov	r1, r4
 8003cba:	f7ff ff59 	bl	8003b70 <__sflush_r>
 8003cbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cc0:	07da      	lsls	r2, r3, #31
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	d4e0      	bmi.n	8003c88 <_fflush_r+0xc>
 8003cc6:	89a3      	ldrh	r3, [r4, #12]
 8003cc8:	059b      	lsls	r3, r3, #22
 8003cca:	d4dd      	bmi.n	8003c88 <_fflush_r+0xc>
 8003ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cce:	f000 f908 	bl	8003ee2 <__retarget_lock_release_recursive>
 8003cd2:	e7d9      	b.n	8003c88 <_fflush_r+0xc>
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <_fflush_r+0x70>)
 8003cd6:	429c      	cmp	r4, r3
 8003cd8:	d101      	bne.n	8003cde <_fflush_r+0x62>
 8003cda:	68ac      	ldr	r4, [r5, #8]
 8003cdc:	e7df      	b.n	8003c9e <_fflush_r+0x22>
 8003cde:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <_fflush_r+0x74>)
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	bf08      	it	eq
 8003ce4:	68ec      	ldreq	r4, [r5, #12]
 8003ce6:	e7da      	b.n	8003c9e <_fflush_r+0x22>
 8003ce8:	08004398 	.word	0x08004398
 8003cec:	080043b8 	.word	0x080043b8
 8003cf0:	08004378 	.word	0x08004378

08003cf4 <std>:
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	b510      	push	{r4, lr}
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8003cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d02:	6083      	str	r3, [r0, #8]
 8003d04:	8181      	strh	r1, [r0, #12]
 8003d06:	6643      	str	r3, [r0, #100]	; 0x64
 8003d08:	81c2      	strh	r2, [r0, #14]
 8003d0a:	6183      	str	r3, [r0, #24]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	2208      	movs	r2, #8
 8003d10:	305c      	adds	r0, #92	; 0x5c
 8003d12:	f7ff fa09 	bl	8003128 <memset>
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <std+0x38>)
 8003d18:	6263      	str	r3, [r4, #36]	; 0x24
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <std+0x3c>)
 8003d1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <std+0x40>)
 8003d20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <std+0x44>)
 8003d24:	6224      	str	r4, [r4, #32]
 8003d26:	6323      	str	r3, [r4, #48]	; 0x30
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08004051 	.word	0x08004051
 8003d30:	08004073 	.word	0x08004073
 8003d34:	080040ab 	.word	0x080040ab
 8003d38:	080040cf 	.word	0x080040cf

08003d3c <_cleanup_r>:
 8003d3c:	4901      	ldr	r1, [pc, #4]	; (8003d44 <_cleanup_r+0x8>)
 8003d3e:	f000 b8af 	b.w	8003ea0 <_fwalk_reent>
 8003d42:	bf00      	nop
 8003d44:	08003c7d 	.word	0x08003c7d

08003d48 <__sfmoreglue>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	2268      	movs	r2, #104	; 0x68
 8003d4c:	1e4d      	subs	r5, r1, #1
 8003d4e:	4355      	muls	r5, r2
 8003d50:	460e      	mov	r6, r1
 8003d52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d56:	f7ff fad1 	bl	80032fc <_malloc_r>
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	b140      	cbz	r0, 8003d70 <__sfmoreglue+0x28>
 8003d5e:	2100      	movs	r1, #0
 8003d60:	e9c0 1600 	strd	r1, r6, [r0]
 8003d64:	300c      	adds	r0, #12
 8003d66:	60a0      	str	r0, [r4, #8]
 8003d68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d6c:	f7ff f9dc 	bl	8003128 <memset>
 8003d70:	4620      	mov	r0, r4
 8003d72:	bd70      	pop	{r4, r5, r6, pc}

08003d74 <__sfp_lock_acquire>:
 8003d74:	4801      	ldr	r0, [pc, #4]	; (8003d7c <__sfp_lock_acquire+0x8>)
 8003d76:	f000 b8b3 	b.w	8003ee0 <__retarget_lock_acquire_recursive>
 8003d7a:	bf00      	nop
 8003d7c:	2000047d 	.word	0x2000047d

08003d80 <__sfp_lock_release>:
 8003d80:	4801      	ldr	r0, [pc, #4]	; (8003d88 <__sfp_lock_release+0x8>)
 8003d82:	f000 b8ae 	b.w	8003ee2 <__retarget_lock_release_recursive>
 8003d86:	bf00      	nop
 8003d88:	2000047d 	.word	0x2000047d

08003d8c <__sinit_lock_acquire>:
 8003d8c:	4801      	ldr	r0, [pc, #4]	; (8003d94 <__sinit_lock_acquire+0x8>)
 8003d8e:	f000 b8a7 	b.w	8003ee0 <__retarget_lock_acquire_recursive>
 8003d92:	bf00      	nop
 8003d94:	2000047e 	.word	0x2000047e

08003d98 <__sinit_lock_release>:
 8003d98:	4801      	ldr	r0, [pc, #4]	; (8003da0 <__sinit_lock_release+0x8>)
 8003d9a:	f000 b8a2 	b.w	8003ee2 <__retarget_lock_release_recursive>
 8003d9e:	bf00      	nop
 8003da0:	2000047e 	.word	0x2000047e

08003da4 <__sinit>:
 8003da4:	b510      	push	{r4, lr}
 8003da6:	4604      	mov	r4, r0
 8003da8:	f7ff fff0 	bl	8003d8c <__sinit_lock_acquire>
 8003dac:	69a3      	ldr	r3, [r4, #24]
 8003dae:	b11b      	cbz	r3, 8003db8 <__sinit+0x14>
 8003db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db4:	f7ff bff0 	b.w	8003d98 <__sinit_lock_release>
 8003db8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003dbc:	6523      	str	r3, [r4, #80]	; 0x50
 8003dbe:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <__sinit+0x68>)
 8003dc0:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <__sinit+0x6c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003dc6:	42a3      	cmp	r3, r4
 8003dc8:	bf04      	itt	eq
 8003dca:	2301      	moveq	r3, #1
 8003dcc:	61a3      	streq	r3, [r4, #24]
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f000 f820 	bl	8003e14 <__sfp>
 8003dd4:	6060      	str	r0, [r4, #4]
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f000 f81c 	bl	8003e14 <__sfp>
 8003ddc:	60a0      	str	r0, [r4, #8]
 8003dde:	4620      	mov	r0, r4
 8003de0:	f000 f818 	bl	8003e14 <__sfp>
 8003de4:	2200      	movs	r2, #0
 8003de6:	60e0      	str	r0, [r4, #12]
 8003de8:	2104      	movs	r1, #4
 8003dea:	6860      	ldr	r0, [r4, #4]
 8003dec:	f7ff ff82 	bl	8003cf4 <std>
 8003df0:	68a0      	ldr	r0, [r4, #8]
 8003df2:	2201      	movs	r2, #1
 8003df4:	2109      	movs	r1, #9
 8003df6:	f7ff ff7d 	bl	8003cf4 <std>
 8003dfa:	68e0      	ldr	r0, [r4, #12]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	2112      	movs	r1, #18
 8003e00:	f7ff ff78 	bl	8003cf4 <std>
 8003e04:	2301      	movs	r3, #1
 8003e06:	61a3      	str	r3, [r4, #24]
 8003e08:	e7d2      	b.n	8003db0 <__sinit+0xc>
 8003e0a:	bf00      	nop
 8003e0c:	08004290 	.word	0x08004290
 8003e10:	08003d3d 	.word	0x08003d3d

08003e14 <__sfp>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	4607      	mov	r7, r0
 8003e18:	f7ff ffac 	bl	8003d74 <__sfp_lock_acquire>
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <__sfp+0x84>)
 8003e1e:	681e      	ldr	r6, [r3, #0]
 8003e20:	69b3      	ldr	r3, [r6, #24]
 8003e22:	b913      	cbnz	r3, 8003e2a <__sfp+0x16>
 8003e24:	4630      	mov	r0, r6
 8003e26:	f7ff ffbd 	bl	8003da4 <__sinit>
 8003e2a:	3648      	adds	r6, #72	; 0x48
 8003e2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	d503      	bpl.n	8003e3c <__sfp+0x28>
 8003e34:	6833      	ldr	r3, [r6, #0]
 8003e36:	b30b      	cbz	r3, 8003e7c <__sfp+0x68>
 8003e38:	6836      	ldr	r6, [r6, #0]
 8003e3a:	e7f7      	b.n	8003e2c <__sfp+0x18>
 8003e3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e40:	b9d5      	cbnz	r5, 8003e78 <__sfp+0x64>
 8003e42:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <__sfp+0x88>)
 8003e44:	60e3      	str	r3, [r4, #12]
 8003e46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e4a:	6665      	str	r5, [r4, #100]	; 0x64
 8003e4c:	f000 f847 	bl	8003ede <__retarget_lock_init_recursive>
 8003e50:	f7ff ff96 	bl	8003d80 <__sfp_lock_release>
 8003e54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e5c:	6025      	str	r5, [r4, #0]
 8003e5e:	61a5      	str	r5, [r4, #24]
 8003e60:	2208      	movs	r2, #8
 8003e62:	4629      	mov	r1, r5
 8003e64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e68:	f7ff f95e 	bl	8003128 <memset>
 8003e6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e74:	4620      	mov	r0, r4
 8003e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e78:	3468      	adds	r4, #104	; 0x68
 8003e7a:	e7d9      	b.n	8003e30 <__sfp+0x1c>
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	4638      	mov	r0, r7
 8003e80:	f7ff ff62 	bl	8003d48 <__sfmoreglue>
 8003e84:	4604      	mov	r4, r0
 8003e86:	6030      	str	r0, [r6, #0]
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d1d5      	bne.n	8003e38 <__sfp+0x24>
 8003e8c:	f7ff ff78 	bl	8003d80 <__sfp_lock_release>
 8003e90:	230c      	movs	r3, #12
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	e7ee      	b.n	8003e74 <__sfp+0x60>
 8003e96:	bf00      	nop
 8003e98:	08004290 	.word	0x08004290
 8003e9c:	ffff0001 	.word	0xffff0001

08003ea0 <_fwalk_reent>:
 8003ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	4688      	mov	r8, r1
 8003ea8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003eac:	2700      	movs	r7, #0
 8003eae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003eb2:	f1b9 0901 	subs.w	r9, r9, #1
 8003eb6:	d505      	bpl.n	8003ec4 <_fwalk_reent+0x24>
 8003eb8:	6824      	ldr	r4, [r4, #0]
 8003eba:	2c00      	cmp	r4, #0
 8003ebc:	d1f7      	bne.n	8003eae <_fwalk_reent+0xe>
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ec4:	89ab      	ldrh	r3, [r5, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d907      	bls.n	8003eda <_fwalk_reent+0x3a>
 8003eca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	d003      	beq.n	8003eda <_fwalk_reent+0x3a>
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	47c0      	blx	r8
 8003ed8:	4307      	orrs	r7, r0
 8003eda:	3568      	adds	r5, #104	; 0x68
 8003edc:	e7e9      	b.n	8003eb2 <_fwalk_reent+0x12>

08003ede <__retarget_lock_init_recursive>:
 8003ede:	4770      	bx	lr

08003ee0 <__retarget_lock_acquire_recursive>:
 8003ee0:	4770      	bx	lr

08003ee2 <__retarget_lock_release_recursive>:
 8003ee2:	4770      	bx	lr

08003ee4 <__swhatbuf_r>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	460e      	mov	r6, r1
 8003ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eec:	2900      	cmp	r1, #0
 8003eee:	b096      	sub	sp, #88	; 0x58
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	461d      	mov	r5, r3
 8003ef4:	da08      	bge.n	8003f08 <__swhatbuf_r+0x24>
 8003ef6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	602a      	str	r2, [r5, #0]
 8003efe:	061a      	lsls	r2, r3, #24
 8003f00:	d410      	bmi.n	8003f24 <__swhatbuf_r+0x40>
 8003f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f06:	e00e      	b.n	8003f26 <__swhatbuf_r+0x42>
 8003f08:	466a      	mov	r2, sp
 8003f0a:	f000 f907 	bl	800411c <_fstat_r>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	dbf1      	blt.n	8003ef6 <__swhatbuf_r+0x12>
 8003f12:	9a01      	ldr	r2, [sp, #4]
 8003f14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f1c:	425a      	negs	r2, r3
 8003f1e:	415a      	adcs	r2, r3
 8003f20:	602a      	str	r2, [r5, #0]
 8003f22:	e7ee      	b.n	8003f02 <__swhatbuf_r+0x1e>
 8003f24:	2340      	movs	r3, #64	; 0x40
 8003f26:	2000      	movs	r0, #0
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	b016      	add	sp, #88	; 0x58
 8003f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f30 <__smakebuf_r>:
 8003f30:	898b      	ldrh	r3, [r1, #12]
 8003f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f34:	079d      	lsls	r5, r3, #30
 8003f36:	4606      	mov	r6, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	d507      	bpl.n	8003f4c <__smakebuf_r+0x1c>
 8003f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	6123      	str	r3, [r4, #16]
 8003f44:	2301      	movs	r3, #1
 8003f46:	6163      	str	r3, [r4, #20]
 8003f48:	b002      	add	sp, #8
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	ab01      	add	r3, sp, #4
 8003f4e:	466a      	mov	r2, sp
 8003f50:	f7ff ffc8 	bl	8003ee4 <__swhatbuf_r>
 8003f54:	9900      	ldr	r1, [sp, #0]
 8003f56:	4605      	mov	r5, r0
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7ff f9cf 	bl	80032fc <_malloc_r>
 8003f5e:	b948      	cbnz	r0, 8003f74 <__smakebuf_r+0x44>
 8003f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f64:	059a      	lsls	r2, r3, #22
 8003f66:	d4ef      	bmi.n	8003f48 <__smakebuf_r+0x18>
 8003f68:	f023 0303 	bic.w	r3, r3, #3
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	e7e3      	b.n	8003f3c <__smakebuf_r+0xc>
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <__smakebuf_r+0x7c>)
 8003f76:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	6020      	str	r0, [r4, #0]
 8003f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f80:	81a3      	strh	r3, [r4, #12]
 8003f82:	9b00      	ldr	r3, [sp, #0]
 8003f84:	6163      	str	r3, [r4, #20]
 8003f86:	9b01      	ldr	r3, [sp, #4]
 8003f88:	6120      	str	r0, [r4, #16]
 8003f8a:	b15b      	cbz	r3, 8003fa4 <__smakebuf_r+0x74>
 8003f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f90:	4630      	mov	r0, r6
 8003f92:	f000 f8d5 	bl	8004140 <_isatty_r>
 8003f96:	b128      	cbz	r0, 8003fa4 <__smakebuf_r+0x74>
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	81a3      	strh	r3, [r4, #12]
 8003fa4:	89a0      	ldrh	r0, [r4, #12]
 8003fa6:	4305      	orrs	r5, r0
 8003fa8:	81a5      	strh	r5, [r4, #12]
 8003faa:	e7cd      	b.n	8003f48 <__smakebuf_r+0x18>
 8003fac:	08003d3d 	.word	0x08003d3d

08003fb0 <__malloc_lock>:
 8003fb0:	4801      	ldr	r0, [pc, #4]	; (8003fb8 <__malloc_lock+0x8>)
 8003fb2:	f7ff bf95 	b.w	8003ee0 <__retarget_lock_acquire_recursive>
 8003fb6:	bf00      	nop
 8003fb8:	2000047c 	.word	0x2000047c

08003fbc <__malloc_unlock>:
 8003fbc:	4801      	ldr	r0, [pc, #4]	; (8003fc4 <__malloc_unlock+0x8>)
 8003fbe:	f7ff bf90 	b.w	8003ee2 <__retarget_lock_release_recursive>
 8003fc2:	bf00      	nop
 8003fc4:	2000047c 	.word	0x2000047c

08003fc8 <_raise_r>:
 8003fc8:	291f      	cmp	r1, #31
 8003fca:	b538      	push	{r3, r4, r5, lr}
 8003fcc:	4604      	mov	r4, r0
 8003fce:	460d      	mov	r5, r1
 8003fd0:	d904      	bls.n	8003fdc <_raise_r+0x14>
 8003fd2:	2316      	movs	r3, #22
 8003fd4:	6003      	str	r3, [r0, #0]
 8003fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003fde:	b112      	cbz	r2, 8003fe6 <_raise_r+0x1e>
 8003fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003fe4:	b94b      	cbnz	r3, 8003ffa <_raise_r+0x32>
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f000 f830 	bl	800404c <_getpid_r>
 8003fec:	462a      	mov	r2, r5
 8003fee:	4601      	mov	r1, r0
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ff6:	f000 b817 	b.w	8004028 <_kill_r>
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d00a      	beq.n	8004014 <_raise_r+0x4c>
 8003ffe:	1c59      	adds	r1, r3, #1
 8004000:	d103      	bne.n	800400a <_raise_r+0x42>
 8004002:	2316      	movs	r3, #22
 8004004:	6003      	str	r3, [r0, #0]
 8004006:	2001      	movs	r0, #1
 8004008:	e7e7      	b.n	8003fda <_raise_r+0x12>
 800400a:	2400      	movs	r4, #0
 800400c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004010:	4628      	mov	r0, r5
 8004012:	4798      	blx	r3
 8004014:	2000      	movs	r0, #0
 8004016:	e7e0      	b.n	8003fda <_raise_r+0x12>

08004018 <raise>:
 8004018:	4b02      	ldr	r3, [pc, #8]	; (8004024 <raise+0xc>)
 800401a:	4601      	mov	r1, r0
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	f7ff bfd3 	b.w	8003fc8 <_raise_r>
 8004022:	bf00      	nop
 8004024:	20000010 	.word	0x20000010

08004028 <_kill_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4d07      	ldr	r5, [pc, #28]	; (8004048 <_kill_r+0x20>)
 800402c:	2300      	movs	r3, #0
 800402e:	4604      	mov	r4, r0
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	f7fc fe1b 	bl	8000c70 <_kill>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	d102      	bne.n	8004044 <_kill_r+0x1c>
 800403e:	682b      	ldr	r3, [r5, #0]
 8004040:	b103      	cbz	r3, 8004044 <_kill_r+0x1c>
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	bd38      	pop	{r3, r4, r5, pc}
 8004046:	bf00      	nop
 8004048:	20000480 	.word	0x20000480

0800404c <_getpid_r>:
 800404c:	f7fc be08 	b.w	8000c60 <_getpid>

08004050 <__sread>:
 8004050:	b510      	push	{r4, lr}
 8004052:	460c      	mov	r4, r1
 8004054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004058:	f000 f894 	bl	8004184 <_read_r>
 800405c:	2800      	cmp	r0, #0
 800405e:	bfab      	itete	ge
 8004060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004062:	89a3      	ldrhlt	r3, [r4, #12]
 8004064:	181b      	addge	r3, r3, r0
 8004066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800406a:	bfac      	ite	ge
 800406c:	6563      	strge	r3, [r4, #84]	; 0x54
 800406e:	81a3      	strhlt	r3, [r4, #12]
 8004070:	bd10      	pop	{r4, pc}

08004072 <__swrite>:
 8004072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004076:	461f      	mov	r7, r3
 8004078:	898b      	ldrh	r3, [r1, #12]
 800407a:	05db      	lsls	r3, r3, #23
 800407c:	4605      	mov	r5, r0
 800407e:	460c      	mov	r4, r1
 8004080:	4616      	mov	r6, r2
 8004082:	d505      	bpl.n	8004090 <__swrite+0x1e>
 8004084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004088:	2302      	movs	r3, #2
 800408a:	2200      	movs	r2, #0
 800408c:	f000 f868 	bl	8004160 <_lseek_r>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800409a:	81a3      	strh	r3, [r4, #12]
 800409c:	4632      	mov	r2, r6
 800409e:	463b      	mov	r3, r7
 80040a0:	4628      	mov	r0, r5
 80040a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040a6:	f000 b817 	b.w	80040d8 <_write_r>

080040aa <__sseek>:
 80040aa:	b510      	push	{r4, lr}
 80040ac:	460c      	mov	r4, r1
 80040ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b2:	f000 f855 	bl	8004160 <_lseek_r>
 80040b6:	1c43      	adds	r3, r0, #1
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	bf15      	itete	ne
 80040bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80040be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040c6:	81a3      	strheq	r3, [r4, #12]
 80040c8:	bf18      	it	ne
 80040ca:	81a3      	strhne	r3, [r4, #12]
 80040cc:	bd10      	pop	{r4, pc}

080040ce <__sclose>:
 80040ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d2:	f000 b813 	b.w	80040fc <_close_r>
	...

080040d8 <_write_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4d07      	ldr	r5, [pc, #28]	; (80040f8 <_write_r+0x20>)
 80040dc:	4604      	mov	r4, r0
 80040de:	4608      	mov	r0, r1
 80040e0:	4611      	mov	r1, r2
 80040e2:	2200      	movs	r2, #0
 80040e4:	602a      	str	r2, [r5, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7fc fdf9 	bl	8000cde <_write>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_write_r+0x1e>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_write_r+0x1e>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20000480 	.word	0x20000480

080040fc <_close_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4d06      	ldr	r5, [pc, #24]	; (8004118 <_close_r+0x1c>)
 8004100:	2300      	movs	r3, #0
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fc fe05 	bl	8000d16 <_close>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_close_r+0x1a>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_close_r+0x1a>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	20000480 	.word	0x20000480

0800411c <_fstat_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d07      	ldr	r5, [pc, #28]	; (800413c <_fstat_r+0x20>)
 8004120:	2300      	movs	r3, #0
 8004122:	4604      	mov	r4, r0
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	f7fc fe00 	bl	8000d2e <_fstat>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	d102      	bne.n	8004138 <_fstat_r+0x1c>
 8004132:	682b      	ldr	r3, [r5, #0]
 8004134:	b103      	cbz	r3, 8004138 <_fstat_r+0x1c>
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	bd38      	pop	{r3, r4, r5, pc}
 800413a:	bf00      	nop
 800413c:	20000480 	.word	0x20000480

08004140 <_isatty_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4d06      	ldr	r5, [pc, #24]	; (800415c <_isatty_r+0x1c>)
 8004144:	2300      	movs	r3, #0
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	f7fc fdff 	bl	8000d4e <_isatty>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_isatty_r+0x1a>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_isatty_r+0x1a>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20000480 	.word	0x20000480

08004160 <_lseek_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d07      	ldr	r5, [pc, #28]	; (8004180 <_lseek_r+0x20>)
 8004164:	4604      	mov	r4, r0
 8004166:	4608      	mov	r0, r1
 8004168:	4611      	mov	r1, r2
 800416a:	2200      	movs	r2, #0
 800416c:	602a      	str	r2, [r5, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	f7fc fdf8 	bl	8000d64 <_lseek>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d102      	bne.n	800417e <_lseek_r+0x1e>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	b103      	cbz	r3, 800417e <_lseek_r+0x1e>
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	20000480 	.word	0x20000480

08004184 <_read_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4d07      	ldr	r5, [pc, #28]	; (80041a4 <_read_r+0x20>)
 8004188:	4604      	mov	r4, r0
 800418a:	4608      	mov	r0, r1
 800418c:	4611      	mov	r1, r2
 800418e:	2200      	movs	r2, #0
 8004190:	602a      	str	r2, [r5, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	f7fc fd86 	bl	8000ca4 <_read>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_read_r+0x1e>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_read_r+0x1e>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	20000480 	.word	0x20000480

080041a8 <_init>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr

080041b4 <_fini>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr
